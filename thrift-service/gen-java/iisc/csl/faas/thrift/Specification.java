/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package iisc.csl.faas.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2022-03-09")
public class Specification implements org.apache.thrift.TBase<Specification, Specification._Fields>, java.io.Serializable, Cloneable, Comparable<Specification> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Specification");

  private static final org.apache.thrift.protocol.TField V_CPUS_FIELD_DESC = new org.apache.thrift.protocol.TField("vCPUs", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField RAM_FIELD_DESC = new org.apache.thrift.protocol.TField("RAM", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpecificationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpecificationTupleSchemeFactory();

  public double vCPUs; // required
  public double RAM; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    V_CPUS((short)1, "vCPUs"),
    RAM((short)2, "RAM");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // V_CPUS
          return V_CPUS;
        case 2: // RAM
          return RAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VCPUS_ISSET_ID = 0;
  private static final int __RAM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.V_CPUS, new org.apache.thrift.meta_data.FieldMetaData("vCPUs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RAM, new org.apache.thrift.meta_data.FieldMetaData("RAM", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Specification.class, metaDataMap);
  }

  public Specification() {
  }

  public Specification(
    double vCPUs,
    double RAM)
  {
    this();
    this.vCPUs = vCPUs;
    setVCPUsIsSet(true);
    this.RAM = RAM;
    setRAMIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Specification(Specification other) {
    __isset_bitfield = other.__isset_bitfield;
    this.vCPUs = other.vCPUs;
    this.RAM = other.RAM;
  }

  public Specification deepCopy() {
    return new Specification(this);
  }

  @Override
  public void clear() {
    setVCPUsIsSet(false);
    this.vCPUs = 0.0;
    setRAMIsSet(false);
    this.RAM = 0.0;
  }

  public double getVCPUs() {
    return this.vCPUs;
  }

  public Specification setVCPUs(double vCPUs) {
    this.vCPUs = vCPUs;
    setVCPUsIsSet(true);
    return this;
  }

  public void unsetVCPUs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VCPUS_ISSET_ID);
  }

  /** Returns true if field vCPUs is set (has been assigned a value) and false otherwise */
  public boolean isSetVCPUs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VCPUS_ISSET_ID);
  }

  public void setVCPUsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VCPUS_ISSET_ID, value);
  }

  public double getRAM() {
    return this.RAM;
  }

  public Specification setRAM(double RAM) {
    this.RAM = RAM;
    setRAMIsSet(true);
    return this;
  }

  public void unsetRAM() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RAM_ISSET_ID);
  }

  /** Returns true if field RAM is set (has been assigned a value) and false otherwise */
  public boolean isSetRAM() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RAM_ISSET_ID);
  }

  public void setRAMIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RAM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case V_CPUS:
      if (value == null) {
        unsetVCPUs();
      } else {
        setVCPUs((java.lang.Double)value);
      }
      break;

    case RAM:
      if (value == null) {
        unsetRAM();
      } else {
        setRAM((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case V_CPUS:
      return getVCPUs();

    case RAM:
      return getRAM();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case V_CPUS:
      return isSetVCPUs();
    case RAM:
      return isSetRAM();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Specification)
      return this.equals((Specification)that);
    return false;
  }

  public boolean equals(Specification that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_vCPUs = true;
    boolean that_present_vCPUs = true;
    if (this_present_vCPUs || that_present_vCPUs) {
      if (!(this_present_vCPUs && that_present_vCPUs))
        return false;
      if (this.vCPUs != that.vCPUs)
        return false;
    }

    boolean this_present_RAM = true;
    boolean that_present_RAM = true;
    if (this_present_RAM || that_present_RAM) {
      if (!(this_present_RAM && that_present_RAM))
        return false;
      if (this.RAM != that.RAM)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(vCPUs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(RAM);

    return hashCode;
  }

  @Override
  public int compareTo(Specification other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetVCPUs()).compareTo(other.isSetVCPUs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVCPUs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vCPUs, other.vCPUs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRAM()).compareTo(other.isSetRAM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRAM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RAM, other.RAM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Specification(");
    boolean first = true;

    sb.append("vCPUs:");
    sb.append(this.vCPUs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("RAM:");
    sb.append(this.RAM);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'vCPUs' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'RAM' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpecificationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpecificationStandardScheme getScheme() {
      return new SpecificationStandardScheme();
    }
  }

  private static class SpecificationStandardScheme extends org.apache.thrift.scheme.StandardScheme<Specification> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Specification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // V_CPUS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vCPUs = iprot.readDouble();
              struct.setVCPUsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RAM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.RAM = iprot.readDouble();
              struct.setRAMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetVCPUs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'vCPUs' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRAM()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'RAM' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Specification struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(V_CPUS_FIELD_DESC);
      oprot.writeDouble(struct.vCPUs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAM_FIELD_DESC);
      oprot.writeDouble(struct.RAM);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpecificationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpecificationTupleScheme getScheme() {
      return new SpecificationTupleScheme();
    }
  }

  private static class SpecificationTupleScheme extends org.apache.thrift.scheme.TupleScheme<Specification> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Specification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeDouble(struct.vCPUs);
      oprot.writeDouble(struct.RAM);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Specification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.vCPUs = iprot.readDouble();
      struct.setVCPUsIsSet(true);
      struct.RAM = iprot.readDouble();
      struct.setRAMIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

