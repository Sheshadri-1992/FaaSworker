/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package masterthriftservices;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * List of functions that are called with an activation ID*
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2022-03-09")
public class RegisterWorkerRequest implements org.apache.thrift.TBase<RegisterWorkerRequest, RegisterWorkerRequest._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterWorkerRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterWorkerRequest");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUB_RESOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("subResourceType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField WORKER_NODE_LOC_FIELD_DESC = new org.apache.thrift.protocol.TField("workerNodeLoc", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RegisterWorkerRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RegisterWorkerRequestTupleSchemeFactory();

  public int nodeId; // required
  public java.lang.String resourceType; // required
  public java.lang.String subResourceType; // required
  public WorkerNodeLocation workerNodeLoc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "nodeId"),
    RESOURCE_TYPE((short)2, "resourceType"),
    SUB_RESOURCE_TYPE((short)3, "subResourceType"),
    WORKER_NODE_LOC((short)4, "workerNodeLoc");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // RESOURCE_TYPE
          return RESOURCE_TYPE;
        case 3: // SUB_RESOURCE_TYPE
          return SUB_RESOURCE_TYPE;
        case 4: // WORKER_NODE_LOC
          return WORKER_NODE_LOC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("resourceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_RESOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("subResourceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKER_NODE_LOC, new org.apache.thrift.meta_data.FieldMetaData("workerNodeLoc", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkerNodeLocation.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterWorkerRequest.class, metaDataMap);
  }

  public RegisterWorkerRequest() {
  }

  public RegisterWorkerRequest(
    int nodeId,
    java.lang.String resourceType,
    java.lang.String subResourceType,
    WorkerNodeLocation workerNodeLoc)
  {
    this();
    this.nodeId = nodeId;
    setNodeIdIsSet(true);
    this.resourceType = resourceType;
    this.subResourceType = subResourceType;
    this.workerNodeLoc = workerNodeLoc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegisterWorkerRequest(RegisterWorkerRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.nodeId = other.nodeId;
    if (other.isSetResourceType()) {
      this.resourceType = other.resourceType;
    }
    if (other.isSetSubResourceType()) {
      this.subResourceType = other.subResourceType;
    }
    if (other.isSetWorkerNodeLoc()) {
      this.workerNodeLoc = new WorkerNodeLocation(other.workerNodeLoc);
    }
  }

  public RegisterWorkerRequest deepCopy() {
    return new RegisterWorkerRequest(this);
  }

  @Override
  public void clear() {
    setNodeIdIsSet(false);
    this.nodeId = 0;
    this.resourceType = null;
    this.subResourceType = null;
    this.workerNodeLoc = null;
  }

  public int getNodeId() {
    return this.nodeId;
  }

  public RegisterWorkerRequest setNodeId(int nodeId) {
    this.nodeId = nodeId;
    setNodeIdIsSet(true);
    return this;
  }

  public void unsetNodeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODEID_ISSET_ID);
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODEID_ISSET_ID);
  }

  public void setNodeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODEID_ISSET_ID, value);
  }

  public java.lang.String getResourceType() {
    return this.resourceType;
  }

  public RegisterWorkerRequest setResourceType(java.lang.String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  public void unsetResourceType() {
    this.resourceType = null;
  }

  /** Returns true if field resourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceType() {
    return this.resourceType != null;
  }

  public void setResourceTypeIsSet(boolean value) {
    if (!value) {
      this.resourceType = null;
    }
  }

  public java.lang.String getSubResourceType() {
    return this.subResourceType;
  }

  public RegisterWorkerRequest setSubResourceType(java.lang.String subResourceType) {
    this.subResourceType = subResourceType;
    return this;
  }

  public void unsetSubResourceType() {
    this.subResourceType = null;
  }

  /** Returns true if field subResourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetSubResourceType() {
    return this.subResourceType != null;
  }

  public void setSubResourceTypeIsSet(boolean value) {
    if (!value) {
      this.subResourceType = null;
    }
  }

  public WorkerNodeLocation getWorkerNodeLoc() {
    return this.workerNodeLoc;
  }

  public RegisterWorkerRequest setWorkerNodeLoc(WorkerNodeLocation workerNodeLoc) {
    this.workerNodeLoc = workerNodeLoc;
    return this;
  }

  public void unsetWorkerNodeLoc() {
    this.workerNodeLoc = null;
  }

  /** Returns true if field workerNodeLoc is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkerNodeLoc() {
    return this.workerNodeLoc != null;
  }

  public void setWorkerNodeLocIsSet(boolean value) {
    if (!value) {
      this.workerNodeLoc = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((java.lang.Integer)value);
      }
      break;

    case RESOURCE_TYPE:
      if (value == null) {
        unsetResourceType();
      } else {
        setResourceType((java.lang.String)value);
      }
      break;

    case SUB_RESOURCE_TYPE:
      if (value == null) {
        unsetSubResourceType();
      } else {
        setSubResourceType((java.lang.String)value);
      }
      break;

    case WORKER_NODE_LOC:
      if (value == null) {
        unsetWorkerNodeLoc();
      } else {
        setWorkerNodeLoc((WorkerNodeLocation)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return getNodeId();

    case RESOURCE_TYPE:
      return getResourceType();

    case SUB_RESOURCE_TYPE:
      return getSubResourceType();

    case WORKER_NODE_LOC:
      return getWorkerNodeLoc();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNodeId();
    case RESOURCE_TYPE:
      return isSetResourceType();
    case SUB_RESOURCE_TYPE:
      return isSetSubResourceType();
    case WORKER_NODE_LOC:
      return isSetWorkerNodeLoc();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RegisterWorkerRequest)
      return this.equals((RegisterWorkerRequest)that);
    return false;
  }

  public boolean equals(RegisterWorkerRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nodeId = true;
    boolean that_present_nodeId = true;
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (this.nodeId != that.nodeId)
        return false;
    }

    boolean this_present_resourceType = true && this.isSetResourceType();
    boolean that_present_resourceType = true && that.isSetResourceType();
    if (this_present_resourceType || that_present_resourceType) {
      if (!(this_present_resourceType && that_present_resourceType))
        return false;
      if (!this.resourceType.equals(that.resourceType))
        return false;
    }

    boolean this_present_subResourceType = true && this.isSetSubResourceType();
    boolean that_present_subResourceType = true && that.isSetSubResourceType();
    if (this_present_subResourceType || that_present_subResourceType) {
      if (!(this_present_subResourceType && that_present_subResourceType))
        return false;
      if (!this.subResourceType.equals(that.subResourceType))
        return false;
    }

    boolean this_present_workerNodeLoc = true && this.isSetWorkerNodeLoc();
    boolean that_present_workerNodeLoc = true && that.isSetWorkerNodeLoc();
    if (this_present_workerNodeLoc || that_present_workerNodeLoc) {
      if (!(this_present_workerNodeLoc && that_present_workerNodeLoc))
        return false;
      if (!this.workerNodeLoc.equals(that.workerNodeLoc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + nodeId;

    hashCode = hashCode * 8191 + ((isSetResourceType()) ? 131071 : 524287);
    if (isSetResourceType())
      hashCode = hashCode * 8191 + resourceType.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubResourceType()) ? 131071 : 524287);
    if (isSetSubResourceType())
      hashCode = hashCode * 8191 + subResourceType.hashCode();

    hashCode = hashCode * 8191 + ((isSetWorkerNodeLoc()) ? 131071 : 524287);
    if (isSetWorkerNodeLoc())
      hashCode = hashCode * 8191 + workerNodeLoc.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RegisterWorkerRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResourceType()).compareTo(other.isSetResourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceType, other.resourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubResourceType()).compareTo(other.isSetSubResourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubResourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subResourceType, other.subResourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWorkerNodeLoc()).compareTo(other.isSetWorkerNodeLoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkerNodeLoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerNodeLoc, other.workerNodeLoc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RegisterWorkerRequest(");
    boolean first = true;

    sb.append("nodeId:");
    sb.append(this.nodeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceType:");
    if (this.resourceType == null) {
      sb.append("null");
    } else {
      sb.append(this.resourceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subResourceType:");
    if (this.subResourceType == null) {
      sb.append("null");
    } else {
      sb.append(this.subResourceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workerNodeLoc:");
    if (this.workerNodeLoc == null) {
      sb.append("null");
    } else {
      sb.append(this.workerNodeLoc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'nodeId' because it's a primitive and you chose the non-beans generator.
    if (resourceType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resourceType' was not present! Struct: " + toString());
    }
    if (subResourceType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'subResourceType' was not present! Struct: " + toString());
    }
    if (workerNodeLoc == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'workerNodeLoc' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (workerNodeLoc != null) {
      workerNodeLoc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegisterWorkerRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RegisterWorkerRequestStandardScheme getScheme() {
      return new RegisterWorkerRequestStandardScheme();
    }
  }

  private static class RegisterWorkerRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<RegisterWorkerRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterWorkerRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeId = iprot.readI32();
              struct.setNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceType = iprot.readString();
              struct.setResourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUB_RESOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subResourceType = iprot.readString();
              struct.setSubResourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WORKER_NODE_LOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.workerNodeLoc = new WorkerNodeLocation();
              struct.workerNodeLoc.read(iprot);
              struct.setWorkerNodeLocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNodeId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'nodeId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterWorkerRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.nodeId);
      oprot.writeFieldEnd();
      if (struct.resourceType != null) {
        oprot.writeFieldBegin(RESOURCE_TYPE_FIELD_DESC);
        oprot.writeString(struct.resourceType);
        oprot.writeFieldEnd();
      }
      if (struct.subResourceType != null) {
        oprot.writeFieldBegin(SUB_RESOURCE_TYPE_FIELD_DESC);
        oprot.writeString(struct.subResourceType);
        oprot.writeFieldEnd();
      }
      if (struct.workerNodeLoc != null) {
        oprot.writeFieldBegin(WORKER_NODE_LOC_FIELD_DESC);
        struct.workerNodeLoc.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegisterWorkerRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RegisterWorkerRequestTupleScheme getScheme() {
      return new RegisterWorkerRequestTupleScheme();
    }
  }

  private static class RegisterWorkerRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<RegisterWorkerRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RegisterWorkerRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.nodeId);
      oprot.writeString(struct.resourceType);
      oprot.writeString(struct.subResourceType);
      struct.workerNodeLoc.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RegisterWorkerRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.nodeId = iprot.readI32();
      struct.setNodeIdIsSet(true);
      struct.resourceType = iprot.readString();
      struct.setResourceTypeIsSet(true);
      struct.subResourceType = iprot.readString();
      struct.setSubResourceTypeIsSet(true);
      struct.workerNodeLoc = new WorkerNodeLocation();
      struct.workerNodeLoc.read(iprot);
      struct.setWorkerNodeLocIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

