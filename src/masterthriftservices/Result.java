/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package masterthriftservices;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2022-03-09")
public class Result implements org.apache.thrift.TBase<Result, Result._Fields>, java.io.Serializable, Cloneable, Comparable<Result> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Result");

  private static final org.apache.thrift.protocol.TField RESULT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("resultName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("resultData", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResultTupleSchemeFactory();

  public java.lang.String resultName; // required
  public java.nio.ByteBuffer resultData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT_NAME((short)1, "resultName"),
    RESULT_DATA((short)2, "resultData");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_NAME
          return RESULT_NAME;
        case 2: // RESULT_DATA
          return RESULT_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_NAME, new org.apache.thrift.meta_data.FieldMetaData("resultName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_DATA, new org.apache.thrift.meta_data.FieldMetaData("resultData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Result.class, metaDataMap);
  }

  public Result() {
  }

  public Result(
    java.lang.String resultName,
    java.nio.ByteBuffer resultData)
  {
    this();
    this.resultName = resultName;
    this.resultData = org.apache.thrift.TBaseHelper.copyBinary(resultData);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Result(Result other) {
    if (other.isSetResultName()) {
      this.resultName = other.resultName;
    }
    if (other.isSetResultData()) {
      this.resultData = org.apache.thrift.TBaseHelper.copyBinary(other.resultData);
    }
  }

  public Result deepCopy() {
    return new Result(this);
  }

  @Override
  public void clear() {
    this.resultName = null;
    this.resultData = null;
  }

  public java.lang.String getResultName() {
    return this.resultName;
  }

  public Result setResultName(java.lang.String resultName) {
    this.resultName = resultName;
    return this;
  }

  public void unsetResultName() {
    this.resultName = null;
  }

  /** Returns true if field resultName is set (has been assigned a value) and false otherwise */
  public boolean isSetResultName() {
    return this.resultName != null;
  }

  public void setResultNameIsSet(boolean value) {
    if (!value) {
      this.resultName = null;
    }
  }

  public byte[] getResultData() {
    setResultData(org.apache.thrift.TBaseHelper.rightSize(resultData));
    return resultData == null ? null : resultData.array();
  }

  public java.nio.ByteBuffer bufferForResultData() {
    return org.apache.thrift.TBaseHelper.copyBinary(resultData);
  }

  public Result setResultData(byte[] resultData) {
    this.resultData = resultData == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(resultData.clone());
    return this;
  }

  public Result setResultData(java.nio.ByteBuffer resultData) {
    this.resultData = org.apache.thrift.TBaseHelper.copyBinary(resultData);
    return this;
  }

  public void unsetResultData() {
    this.resultData = null;
  }

  /** Returns true if field resultData is set (has been assigned a value) and false otherwise */
  public boolean isSetResultData() {
    return this.resultData != null;
  }

  public void setResultDataIsSet(boolean value) {
    if (!value) {
      this.resultData = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case RESULT_NAME:
      if (value == null) {
        unsetResultName();
      } else {
        setResultName((java.lang.String)value);
      }
      break;

    case RESULT_DATA:
      if (value == null) {
        unsetResultData();
      } else {
        if (value instanceof byte[]) {
          setResultData((byte[])value);
        } else {
          setResultData((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_NAME:
      return getResultName();

    case RESULT_DATA:
      return getResultData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RESULT_NAME:
      return isSetResultName();
    case RESULT_DATA:
      return isSetResultData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Result)
      return this.equals((Result)that);
    return false;
  }

  public boolean equals(Result that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_resultName = true && this.isSetResultName();
    boolean that_present_resultName = true && that.isSetResultName();
    if (this_present_resultName || that_present_resultName) {
      if (!(this_present_resultName && that_present_resultName))
        return false;
      if (!this.resultName.equals(that.resultName))
        return false;
    }

    boolean this_present_resultData = true && this.isSetResultData();
    boolean that_present_resultData = true && that.isSetResultData();
    if (this_present_resultData || that_present_resultData) {
      if (!(this_present_resultData && that_present_resultData))
        return false;
      if (!this.resultData.equals(that.resultData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResultName()) ? 131071 : 524287);
    if (isSetResultName())
      hashCode = hashCode * 8191 + resultName.hashCode();

    hashCode = hashCode * 8191 + ((isSetResultData()) ? 131071 : 524287);
    if (isSetResultData())
      hashCode = hashCode * 8191 + resultData.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetResultName()).compareTo(other.isSetResultName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultName, other.resultName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResultData()).compareTo(other.isSetResultData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultData, other.resultData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Result(");
    boolean first = true;

    sb.append("resultName:");
    if (this.resultName == null) {
      sb.append("null");
    } else {
      sb.append(this.resultName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultData:");
    if (this.resultData == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.resultData, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (resultName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resultName' was not present! Struct: " + toString());
    }
    if (resultData == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resultData' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResultStandardScheme getScheme() {
      return new ResultStandardScheme();
    }
  }

  private static class ResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Result> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultName = iprot.readString();
              struct.setResultNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultData = iprot.readBinary();
              struct.setResultDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Result struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resultName != null) {
        oprot.writeFieldBegin(RESULT_NAME_FIELD_DESC);
        oprot.writeString(struct.resultName);
        oprot.writeFieldEnd();
      }
      if (struct.resultData != null) {
        oprot.writeFieldBegin(RESULT_DATA_FIELD_DESC);
        oprot.writeBinary(struct.resultData);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResultTupleScheme getScheme() {
      return new ResultTupleScheme();
    }
  }

  private static class ResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Result> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.resultName);
      oprot.writeBinary(struct.resultData);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.resultName = iprot.readString();
      struct.setResultNameIsSet(true);
      struct.resultData = iprot.readBinary();
      struct.setResultDataIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

