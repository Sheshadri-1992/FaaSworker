/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package masterthriftservices;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2022-02-20")
public class UpdateResourceRequest implements org.apache.thrift.TBase<UpdateResourceRequest, UpdateResourceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateResourceRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateResourceRequest");

  private static final org.apache.thrift.protocol.TField CPU_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuUsage", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_cores", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UpdateResourceRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UpdateResourceRequestTupleSchemeFactory();

  public int cpuUsage; // required
  public int num_cores; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CPU_USAGE((short)1, "cpuUsage"),
    NUM_CORES((short)2, "num_cores");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CPU_USAGE
          return CPU_USAGE;
        case 2: // NUM_CORES
          return NUM_CORES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CPUUSAGE_ISSET_ID = 0;
  private static final int __NUM_CORES_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NUM_CORES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CPU_USAGE, new org.apache.thrift.meta_data.FieldMetaData("cpuUsage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_CORES, new org.apache.thrift.meta_data.FieldMetaData("num_cores", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateResourceRequest.class, metaDataMap);
  }

  public UpdateResourceRequest() {
  }

  public UpdateResourceRequest(
    int cpuUsage)
  {
    this();
    this.cpuUsage = cpuUsage;
    setCpuUsageIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateResourceRequest(UpdateResourceRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.cpuUsage = other.cpuUsage;
    this.num_cores = other.num_cores;
  }

  public UpdateResourceRequest deepCopy() {
    return new UpdateResourceRequest(this);
  }

  @Override
  public void clear() {
    setCpuUsageIsSet(false);
    this.cpuUsage = 0;
    setNum_coresIsSet(false);
    this.num_cores = 0;
  }

  public int getCpuUsage() {
    return this.cpuUsage;
  }

  public UpdateResourceRequest setCpuUsage(int cpuUsage) {
    this.cpuUsage = cpuUsage;
    setCpuUsageIsSet(true);
    return this;
  }

  public void unsetCpuUsage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPUUSAGE_ISSET_ID);
  }

  /** Returns true if field cpuUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuUsage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPUUSAGE_ISSET_ID);
  }

  public void setCpuUsageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPUUSAGE_ISSET_ID, value);
  }

  public int getNum_cores() {
    return this.num_cores;
  }

  public UpdateResourceRequest setNum_cores(int num_cores) {
    this.num_cores = num_cores;
    setNum_coresIsSet(true);
    return this;
  }

  public void unsetNum_cores() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_CORES_ISSET_ID);
  }

  /** Returns true if field num_cores is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_cores() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_CORES_ISSET_ID);
  }

  public void setNum_coresIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_CORES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CPU_USAGE:
      if (value == null) {
        unsetCpuUsage();
      } else {
        setCpuUsage((java.lang.Integer)value);
      }
      break;

    case NUM_CORES:
      if (value == null) {
        unsetNum_cores();
      } else {
        setNum_cores((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CPU_USAGE:
      return getCpuUsage();

    case NUM_CORES:
      return getNum_cores();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CPU_USAGE:
      return isSetCpuUsage();
    case NUM_CORES:
      return isSetNum_cores();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateResourceRequest)
      return this.equals((UpdateResourceRequest)that);
    return false;
  }

  public boolean equals(UpdateResourceRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cpuUsage = true;
    boolean that_present_cpuUsage = true;
    if (this_present_cpuUsage || that_present_cpuUsage) {
      if (!(this_present_cpuUsage && that_present_cpuUsage))
        return false;
      if (this.cpuUsage != that.cpuUsage)
        return false;
    }

    boolean this_present_num_cores = true && this.isSetNum_cores();
    boolean that_present_num_cores = true && that.isSetNum_cores();
    if (this_present_num_cores || that_present_num_cores) {
      if (!(this_present_num_cores && that_present_num_cores))
        return false;
      if (this.num_cores != that.num_cores)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + cpuUsage;

    hashCode = hashCode * 8191 + ((isSetNum_cores()) ? 131071 : 524287);
    if (isSetNum_cores())
      hashCode = hashCode * 8191 + num_cores;

    return hashCode;
  }

  @Override
  public int compareTo(UpdateResourceRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCpuUsage()).compareTo(other.isSetCpuUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuUsage, other.cpuUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum_cores()).compareTo(other.isSetNum_cores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_cores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_cores, other.num_cores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UpdateResourceRequest(");
    boolean first = true;

    sb.append("cpuUsage:");
    sb.append(this.cpuUsage);
    first = false;
    if (isSetNum_cores()) {
      if (!first) sb.append(", ");
      sb.append("num_cores:");
      sb.append(this.num_cores);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'cpuUsage' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateResourceRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UpdateResourceRequestStandardScheme getScheme() {
      return new UpdateResourceRequestStandardScheme();
    }
  }

  private static class UpdateResourceRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<UpdateResourceRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateResourceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CPU_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpuUsage = iprot.readI32();
              struct.setCpuUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_CORES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_cores = iprot.readI32();
              struct.setNum_coresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCpuUsage()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cpuUsage' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateResourceRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CPU_USAGE_FIELD_DESC);
      oprot.writeI32(struct.cpuUsage);
      oprot.writeFieldEnd();
      if (struct.isSetNum_cores()) {
        oprot.writeFieldBegin(NUM_CORES_FIELD_DESC);
        oprot.writeI32(struct.num_cores);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateResourceRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UpdateResourceRequestTupleScheme getScheme() {
      return new UpdateResourceRequestTupleScheme();
    }
  }

  private static class UpdateResourceRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<UpdateResourceRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateResourceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.cpuUsage);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNum_cores()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetNum_cores()) {
        oprot.writeI32(struct.num_cores);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateResourceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.cpuUsage = iprot.readI32();
      struct.setCpuUsageIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.num_cores = iprot.readI32();
        struct.setNum_coresIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

