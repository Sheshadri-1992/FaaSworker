/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package masterthriftservices;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2022-02-20")
public class FaaSMasterService {

  public interface Iface {

    public RegisterFunctionResponse registerFunction(RegisterFunctionRequest registerReq) throws org.apache.thrift.TException;

    /**
     * Create an activation ID for each function execution request *
     * 
     * @param incomingReqPayload
     */
    public ExecRequestResponse executeIncomingRequest(ExecuteRequestPayload incomingReqPayload) throws org.apache.thrift.TException;

    public ExecRequestResponse execMultiInputRequest(java.util.List<Result> paramList, java.lang.String eventID) throws org.apache.thrift.TException;

    public FuncExecutionResponse retrieveFunctionExecutionStatus(java.lang.String activationID) throws org.apache.thrift.TException;

    public RegisterWorkflowResponse registerApplicationWorkflow(java.lang.String applicationName, java.lang.String applicationWorkflowJSON) throws org.apache.thrift.TException;

    public RegisterWorkerResponse registerWorker(RegisterWorkerRequest registerReq) throws org.apache.thrift.TException;

    public UpdateResourceResponse updateResourceUsage(UpdateResourceRequest updateResourceReq, java.lang.String nodeID) throws org.apache.thrift.TException;

    public WriteResultsResponse writeFunctionOutput(java.lang.String eventID, java.util.List<Result> outputset, java.lang.String functionName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void registerFunction(RegisterFunctionRequest registerReq, org.apache.thrift.async.AsyncMethodCallback<RegisterFunctionResponse> resultHandler) throws org.apache.thrift.TException;

    public void executeIncomingRequest(ExecuteRequestPayload incomingReqPayload, org.apache.thrift.async.AsyncMethodCallback<ExecRequestResponse> resultHandler) throws org.apache.thrift.TException;

    public void execMultiInputRequest(java.util.List<Result> paramList, java.lang.String eventID, org.apache.thrift.async.AsyncMethodCallback<ExecRequestResponse> resultHandler) throws org.apache.thrift.TException;

    public void retrieveFunctionExecutionStatus(java.lang.String activationID, org.apache.thrift.async.AsyncMethodCallback<FuncExecutionResponse> resultHandler) throws org.apache.thrift.TException;

    public void registerApplicationWorkflow(java.lang.String applicationName, java.lang.String applicationWorkflowJSON, org.apache.thrift.async.AsyncMethodCallback<RegisterWorkflowResponse> resultHandler) throws org.apache.thrift.TException;

    public void registerWorker(RegisterWorkerRequest registerReq, org.apache.thrift.async.AsyncMethodCallback<RegisterWorkerResponse> resultHandler) throws org.apache.thrift.TException;

    public void updateResourceUsage(UpdateResourceRequest updateResourceReq, java.lang.String nodeID, org.apache.thrift.async.AsyncMethodCallback<UpdateResourceResponse> resultHandler) throws org.apache.thrift.TException;

    public void writeFunctionOutput(java.lang.String eventID, java.util.List<Result> outputset, java.lang.String functionName, org.apache.thrift.async.AsyncMethodCallback<WriteResultsResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public RegisterFunctionResponse registerFunction(RegisterFunctionRequest registerReq) throws org.apache.thrift.TException
    {
      send_registerFunction(registerReq);
      return recv_registerFunction();
    }

    public void send_registerFunction(RegisterFunctionRequest registerReq) throws org.apache.thrift.TException
    {
      registerFunction_args args = new registerFunction_args();
      args.setRegisterReq(registerReq);
      sendBase("registerFunction", args);
    }

    public RegisterFunctionResponse recv_registerFunction() throws org.apache.thrift.TException
    {
      registerFunction_result result = new registerFunction_result();
      receiveBase(result, "registerFunction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerFunction failed: unknown result");
    }

    public ExecRequestResponse executeIncomingRequest(ExecuteRequestPayload incomingReqPayload) throws org.apache.thrift.TException
    {
      send_executeIncomingRequest(incomingReqPayload);
      return recv_executeIncomingRequest();
    }

    public void send_executeIncomingRequest(ExecuteRequestPayload incomingReqPayload) throws org.apache.thrift.TException
    {
      executeIncomingRequest_args args = new executeIncomingRequest_args();
      args.setIncomingReqPayload(incomingReqPayload);
      sendBase("executeIncomingRequest", args);
    }

    public ExecRequestResponse recv_executeIncomingRequest() throws org.apache.thrift.TException
    {
      executeIncomingRequest_result result = new executeIncomingRequest_result();
      receiveBase(result, "executeIncomingRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "executeIncomingRequest failed: unknown result");
    }

    public ExecRequestResponse execMultiInputRequest(java.util.List<Result> paramList, java.lang.String eventID) throws org.apache.thrift.TException
    {
      send_execMultiInputRequest(paramList, eventID);
      return recv_execMultiInputRequest();
    }

    public void send_execMultiInputRequest(java.util.List<Result> paramList, java.lang.String eventID) throws org.apache.thrift.TException
    {
      execMultiInputRequest_args args = new execMultiInputRequest_args();
      args.setParamList(paramList);
      args.setEventID(eventID);
      sendBase("execMultiInputRequest", args);
    }

    public ExecRequestResponse recv_execMultiInputRequest() throws org.apache.thrift.TException
    {
      execMultiInputRequest_result result = new execMultiInputRequest_result();
      receiveBase(result, "execMultiInputRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execMultiInputRequest failed: unknown result");
    }

    public FuncExecutionResponse retrieveFunctionExecutionStatus(java.lang.String activationID) throws org.apache.thrift.TException
    {
      send_retrieveFunctionExecutionStatus(activationID);
      return recv_retrieveFunctionExecutionStatus();
    }

    public void send_retrieveFunctionExecutionStatus(java.lang.String activationID) throws org.apache.thrift.TException
    {
      retrieveFunctionExecutionStatus_args args = new retrieveFunctionExecutionStatus_args();
      args.setActivationID(activationID);
      sendBase("retrieveFunctionExecutionStatus", args);
    }

    public FuncExecutionResponse recv_retrieveFunctionExecutionStatus() throws org.apache.thrift.TException
    {
      retrieveFunctionExecutionStatus_result result = new retrieveFunctionExecutionStatus_result();
      receiveBase(result, "retrieveFunctionExecutionStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveFunctionExecutionStatus failed: unknown result");
    }

    public RegisterWorkflowResponse registerApplicationWorkflow(java.lang.String applicationName, java.lang.String applicationWorkflowJSON) throws org.apache.thrift.TException
    {
      send_registerApplicationWorkflow(applicationName, applicationWorkflowJSON);
      return recv_registerApplicationWorkflow();
    }

    public void send_registerApplicationWorkflow(java.lang.String applicationName, java.lang.String applicationWorkflowJSON) throws org.apache.thrift.TException
    {
      registerApplicationWorkflow_args args = new registerApplicationWorkflow_args();
      args.setApplicationName(applicationName);
      args.setApplicationWorkflowJSON(applicationWorkflowJSON);
      sendBase("registerApplicationWorkflow", args);
    }

    public RegisterWorkflowResponse recv_registerApplicationWorkflow() throws org.apache.thrift.TException
    {
      registerApplicationWorkflow_result result = new registerApplicationWorkflow_result();
      receiveBase(result, "registerApplicationWorkflow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerApplicationWorkflow failed: unknown result");
    }

    public RegisterWorkerResponse registerWorker(RegisterWorkerRequest registerReq) throws org.apache.thrift.TException
    {
      send_registerWorker(registerReq);
      return recv_registerWorker();
    }

    public void send_registerWorker(RegisterWorkerRequest registerReq) throws org.apache.thrift.TException
    {
      registerWorker_args args = new registerWorker_args();
      args.setRegisterReq(registerReq);
      sendBase("registerWorker", args);
    }

    public RegisterWorkerResponse recv_registerWorker() throws org.apache.thrift.TException
    {
      registerWorker_result result = new registerWorker_result();
      receiveBase(result, "registerWorker");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerWorker failed: unknown result");
    }

    public UpdateResourceResponse updateResourceUsage(UpdateResourceRequest updateResourceReq, java.lang.String nodeID) throws org.apache.thrift.TException
    {
      send_updateResourceUsage(updateResourceReq, nodeID);
      return recv_updateResourceUsage();
    }

    public void send_updateResourceUsage(UpdateResourceRequest updateResourceReq, java.lang.String nodeID) throws org.apache.thrift.TException
    {
      updateResourceUsage_args args = new updateResourceUsage_args();
      args.setUpdateResourceReq(updateResourceReq);
      args.setNodeID(nodeID);
      sendBase("updateResourceUsage", args);
    }

    public UpdateResourceResponse recv_updateResourceUsage() throws org.apache.thrift.TException
    {
      updateResourceUsage_result result = new updateResourceUsage_result();
      receiveBase(result, "updateResourceUsage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateResourceUsage failed: unknown result");
    }

    public WriteResultsResponse writeFunctionOutput(java.lang.String eventID, java.util.List<Result> outputset, java.lang.String functionName) throws org.apache.thrift.TException
    {
      send_writeFunctionOutput(eventID, outputset, functionName);
      return recv_writeFunctionOutput();
    }

    public void send_writeFunctionOutput(java.lang.String eventID, java.util.List<Result> outputset, java.lang.String functionName) throws org.apache.thrift.TException
    {
      writeFunctionOutput_args args = new writeFunctionOutput_args();
      args.setEventID(eventID);
      args.setOutputset(outputset);
      args.setFunctionName(functionName);
      sendBase("writeFunctionOutput", args);
    }

    public WriteResultsResponse recv_writeFunctionOutput() throws org.apache.thrift.TException
    {
      writeFunctionOutput_result result = new writeFunctionOutput_result();
      receiveBase(result, "writeFunctionOutput");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeFunctionOutput failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerFunction(RegisterFunctionRequest registerReq, org.apache.thrift.async.AsyncMethodCallback<RegisterFunctionResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerFunction_call method_call = new registerFunction_call(registerReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerFunction_call extends org.apache.thrift.async.TAsyncMethodCall<RegisterFunctionResponse> {
      private RegisterFunctionRequest registerReq;
      public registerFunction_call(RegisterFunctionRequest registerReq, org.apache.thrift.async.AsyncMethodCallback<RegisterFunctionResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registerReq = registerReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerFunction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerFunction_args args = new registerFunction_args();
        args.setRegisterReq(registerReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RegisterFunctionResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerFunction();
      }
    }

    public void executeIncomingRequest(ExecuteRequestPayload incomingReqPayload, org.apache.thrift.async.AsyncMethodCallback<ExecRequestResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      executeIncomingRequest_call method_call = new executeIncomingRequest_call(incomingReqPayload, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeIncomingRequest_call extends org.apache.thrift.async.TAsyncMethodCall<ExecRequestResponse> {
      private ExecuteRequestPayload incomingReqPayload;
      public executeIncomingRequest_call(ExecuteRequestPayload incomingReqPayload, org.apache.thrift.async.AsyncMethodCallback<ExecRequestResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.incomingReqPayload = incomingReqPayload;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executeIncomingRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        executeIncomingRequest_args args = new executeIncomingRequest_args();
        args.setIncomingReqPayload(incomingReqPayload);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExecRequestResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeIncomingRequest();
      }
    }

    public void execMultiInputRequest(java.util.List<Result> paramList, java.lang.String eventID, org.apache.thrift.async.AsyncMethodCallback<ExecRequestResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execMultiInputRequest_call method_call = new execMultiInputRequest_call(paramList, eventID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class execMultiInputRequest_call extends org.apache.thrift.async.TAsyncMethodCall<ExecRequestResponse> {
      private java.util.List<Result> paramList;
      private java.lang.String eventID;
      public execMultiInputRequest_call(java.util.List<Result> paramList, java.lang.String eventID, org.apache.thrift.async.AsyncMethodCallback<ExecRequestResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paramList = paramList;
        this.eventID = eventID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execMultiInputRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execMultiInputRequest_args args = new execMultiInputRequest_args();
        args.setParamList(paramList);
        args.setEventID(eventID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ExecRequestResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execMultiInputRequest();
      }
    }

    public void retrieveFunctionExecutionStatus(java.lang.String activationID, org.apache.thrift.async.AsyncMethodCallback<FuncExecutionResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      retrieveFunctionExecutionStatus_call method_call = new retrieveFunctionExecutionStatus_call(activationID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveFunctionExecutionStatus_call extends org.apache.thrift.async.TAsyncMethodCall<FuncExecutionResponse> {
      private java.lang.String activationID;
      public retrieveFunctionExecutionStatus_call(java.lang.String activationID, org.apache.thrift.async.AsyncMethodCallback<FuncExecutionResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.activationID = activationID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveFunctionExecutionStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveFunctionExecutionStatus_args args = new retrieveFunctionExecutionStatus_args();
        args.setActivationID(activationID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FuncExecutionResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveFunctionExecutionStatus();
      }
    }

    public void registerApplicationWorkflow(java.lang.String applicationName, java.lang.String applicationWorkflowJSON, org.apache.thrift.async.AsyncMethodCallback<RegisterWorkflowResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerApplicationWorkflow_call method_call = new registerApplicationWorkflow_call(applicationName, applicationWorkflowJSON, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerApplicationWorkflow_call extends org.apache.thrift.async.TAsyncMethodCall<RegisterWorkflowResponse> {
      private java.lang.String applicationName;
      private java.lang.String applicationWorkflowJSON;
      public registerApplicationWorkflow_call(java.lang.String applicationName, java.lang.String applicationWorkflowJSON, org.apache.thrift.async.AsyncMethodCallback<RegisterWorkflowResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applicationName = applicationName;
        this.applicationWorkflowJSON = applicationWorkflowJSON;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerApplicationWorkflow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerApplicationWorkflow_args args = new registerApplicationWorkflow_args();
        args.setApplicationName(applicationName);
        args.setApplicationWorkflowJSON(applicationWorkflowJSON);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RegisterWorkflowResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerApplicationWorkflow();
      }
    }

    public void registerWorker(RegisterWorkerRequest registerReq, org.apache.thrift.async.AsyncMethodCallback<RegisterWorkerResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerWorker_call method_call = new registerWorker_call(registerReq, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerWorker_call extends org.apache.thrift.async.TAsyncMethodCall<RegisterWorkerResponse> {
      private RegisterWorkerRequest registerReq;
      public registerWorker_call(RegisterWorkerRequest registerReq, org.apache.thrift.async.AsyncMethodCallback<RegisterWorkerResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registerReq = registerReq;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerWorker", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerWorker_args args = new registerWorker_args();
        args.setRegisterReq(registerReq);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RegisterWorkerResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerWorker();
      }
    }

    public void updateResourceUsage(UpdateResourceRequest updateResourceReq, java.lang.String nodeID, org.apache.thrift.async.AsyncMethodCallback<UpdateResourceResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateResourceUsage_call method_call = new updateResourceUsage_call(updateResourceReq, nodeID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateResourceUsage_call extends org.apache.thrift.async.TAsyncMethodCall<UpdateResourceResponse> {
      private UpdateResourceRequest updateResourceReq;
      private java.lang.String nodeID;
      public updateResourceUsage_call(UpdateResourceRequest updateResourceReq, java.lang.String nodeID, org.apache.thrift.async.AsyncMethodCallback<UpdateResourceResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.updateResourceReq = updateResourceReq;
        this.nodeID = nodeID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateResourceUsage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateResourceUsage_args args = new updateResourceUsage_args();
        args.setUpdateResourceReq(updateResourceReq);
        args.setNodeID(nodeID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UpdateResourceResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateResourceUsage();
      }
    }

    public void writeFunctionOutput(java.lang.String eventID, java.util.List<Result> outputset, java.lang.String functionName, org.apache.thrift.async.AsyncMethodCallback<WriteResultsResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeFunctionOutput_call method_call = new writeFunctionOutput_call(eventID, outputset, functionName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeFunctionOutput_call extends org.apache.thrift.async.TAsyncMethodCall<WriteResultsResponse> {
      private java.lang.String eventID;
      private java.util.List<Result> outputset;
      private java.lang.String functionName;
      public writeFunctionOutput_call(java.lang.String eventID, java.util.List<Result> outputset, java.lang.String functionName, org.apache.thrift.async.AsyncMethodCallback<WriteResultsResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventID = eventID;
        this.outputset = outputset;
        this.functionName = functionName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeFunctionOutput", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeFunctionOutput_args args = new writeFunctionOutput_args();
        args.setEventID(eventID);
        args.setOutputset(outputset);
        args.setFunctionName(functionName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WriteResultsResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeFunctionOutput();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerFunction", new registerFunction());
      processMap.put("executeIncomingRequest", new executeIncomingRequest());
      processMap.put("execMultiInputRequest", new execMultiInputRequest());
      processMap.put("retrieveFunctionExecutionStatus", new retrieveFunctionExecutionStatus());
      processMap.put("registerApplicationWorkflow", new registerApplicationWorkflow());
      processMap.put("registerWorker", new registerWorker());
      processMap.put("updateResourceUsage", new updateResourceUsage());
      processMap.put("writeFunctionOutput", new writeFunctionOutput());
      return processMap;
    }

    public static class registerFunction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerFunction_args> {
      public registerFunction() {
        super("registerFunction");
      }

      public registerFunction_args getEmptyArgsInstance() {
        return new registerFunction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public registerFunction_result getResult(I iface, registerFunction_args args) throws org.apache.thrift.TException {
        registerFunction_result result = new registerFunction_result();
        result.success = iface.registerFunction(args.registerReq);
        return result;
      }
    }

    public static class executeIncomingRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executeIncomingRequest_args> {
      public executeIncomingRequest() {
        super("executeIncomingRequest");
      }

      public executeIncomingRequest_args getEmptyArgsInstance() {
        return new executeIncomingRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public executeIncomingRequest_result getResult(I iface, executeIncomingRequest_args args) throws org.apache.thrift.TException {
        executeIncomingRequest_result result = new executeIncomingRequest_result();
        result.success = iface.executeIncomingRequest(args.incomingReqPayload);
        return result;
      }
    }

    public static class execMultiInputRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, execMultiInputRequest_args> {
      public execMultiInputRequest() {
        super("execMultiInputRequest");
      }

      public execMultiInputRequest_args getEmptyArgsInstance() {
        return new execMultiInputRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public execMultiInputRequest_result getResult(I iface, execMultiInputRequest_args args) throws org.apache.thrift.TException {
        execMultiInputRequest_result result = new execMultiInputRequest_result();
        result.success = iface.execMultiInputRequest(args.paramList, args.eventID);
        return result;
      }
    }

    public static class retrieveFunctionExecutionStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveFunctionExecutionStatus_args> {
      public retrieveFunctionExecutionStatus() {
        super("retrieveFunctionExecutionStatus");
      }

      public retrieveFunctionExecutionStatus_args getEmptyArgsInstance() {
        return new retrieveFunctionExecutionStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public retrieveFunctionExecutionStatus_result getResult(I iface, retrieveFunctionExecutionStatus_args args) throws org.apache.thrift.TException {
        retrieveFunctionExecutionStatus_result result = new retrieveFunctionExecutionStatus_result();
        result.success = iface.retrieveFunctionExecutionStatus(args.activationID);
        return result;
      }
    }

    public static class registerApplicationWorkflow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerApplicationWorkflow_args> {
      public registerApplicationWorkflow() {
        super("registerApplicationWorkflow");
      }

      public registerApplicationWorkflow_args getEmptyArgsInstance() {
        return new registerApplicationWorkflow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public registerApplicationWorkflow_result getResult(I iface, registerApplicationWorkflow_args args) throws org.apache.thrift.TException {
        registerApplicationWorkflow_result result = new registerApplicationWorkflow_result();
        result.success = iface.registerApplicationWorkflow(args.applicationName, args.applicationWorkflowJSON);
        return result;
      }
    }

    public static class registerWorker<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerWorker_args> {
      public registerWorker() {
        super("registerWorker");
      }

      public registerWorker_args getEmptyArgsInstance() {
        return new registerWorker_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public registerWorker_result getResult(I iface, registerWorker_args args) throws org.apache.thrift.TException {
        registerWorker_result result = new registerWorker_result();
        result.success = iface.registerWorker(args.registerReq);
        return result;
      }
    }

    public static class updateResourceUsage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateResourceUsage_args> {
      public updateResourceUsage() {
        super("updateResourceUsage");
      }

      public updateResourceUsage_args getEmptyArgsInstance() {
        return new updateResourceUsage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateResourceUsage_result getResult(I iface, updateResourceUsage_args args) throws org.apache.thrift.TException {
        updateResourceUsage_result result = new updateResourceUsage_result();
        result.success = iface.updateResourceUsage(args.updateResourceReq, args.nodeID);
        return result;
      }
    }

    public static class writeFunctionOutput<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeFunctionOutput_args> {
      public writeFunctionOutput() {
        super("writeFunctionOutput");
      }

      public writeFunctionOutput_args getEmptyArgsInstance() {
        return new writeFunctionOutput_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeFunctionOutput_result getResult(I iface, writeFunctionOutput_args args) throws org.apache.thrift.TException {
        writeFunctionOutput_result result = new writeFunctionOutput_result();
        result.success = iface.writeFunctionOutput(args.eventID, args.outputset, args.functionName);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("registerFunction", new registerFunction());
      processMap.put("executeIncomingRequest", new executeIncomingRequest());
      processMap.put("execMultiInputRequest", new execMultiInputRequest());
      processMap.put("retrieveFunctionExecutionStatus", new retrieveFunctionExecutionStatus());
      processMap.put("registerApplicationWorkflow", new registerApplicationWorkflow());
      processMap.put("registerWorker", new registerWorker());
      processMap.put("updateResourceUsage", new updateResourceUsage());
      processMap.put("writeFunctionOutput", new writeFunctionOutput());
      return processMap;
    }

    public static class registerFunction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerFunction_args, RegisterFunctionResponse> {
      public registerFunction() {
        super("registerFunction");
      }

      public registerFunction_args getEmptyArgsInstance() {
        return new registerFunction_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<RegisterFunctionResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<RegisterFunctionResponse>() { 
          public void onComplete(RegisterFunctionResponse o) {
            registerFunction_result result = new registerFunction_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registerFunction_result result = new registerFunction_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerFunction_args args, org.apache.thrift.async.AsyncMethodCallback<RegisterFunctionResponse> resultHandler) throws org.apache.thrift.TException {
        iface.registerFunction(args.registerReq,resultHandler);
      }
    }

    public static class executeIncomingRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, executeIncomingRequest_args, ExecRequestResponse> {
      public executeIncomingRequest() {
        super("executeIncomingRequest");
      }

      public executeIncomingRequest_args getEmptyArgsInstance() {
        return new executeIncomingRequest_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ExecRequestResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ExecRequestResponse>() { 
          public void onComplete(ExecRequestResponse o) {
            executeIncomingRequest_result result = new executeIncomingRequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            executeIncomingRequest_result result = new executeIncomingRequest_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, executeIncomingRequest_args args, org.apache.thrift.async.AsyncMethodCallback<ExecRequestResponse> resultHandler) throws org.apache.thrift.TException {
        iface.executeIncomingRequest(args.incomingReqPayload,resultHandler);
      }
    }

    public static class execMultiInputRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, execMultiInputRequest_args, ExecRequestResponse> {
      public execMultiInputRequest() {
        super("execMultiInputRequest");
      }

      public execMultiInputRequest_args getEmptyArgsInstance() {
        return new execMultiInputRequest_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ExecRequestResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ExecRequestResponse>() { 
          public void onComplete(ExecRequestResponse o) {
            execMultiInputRequest_result result = new execMultiInputRequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            execMultiInputRequest_result result = new execMultiInputRequest_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, execMultiInputRequest_args args, org.apache.thrift.async.AsyncMethodCallback<ExecRequestResponse> resultHandler) throws org.apache.thrift.TException {
        iface.execMultiInputRequest(args.paramList, args.eventID,resultHandler);
      }
    }

    public static class retrieveFunctionExecutionStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveFunctionExecutionStatus_args, FuncExecutionResponse> {
      public retrieveFunctionExecutionStatus() {
        super("retrieveFunctionExecutionStatus");
      }

      public retrieveFunctionExecutionStatus_args getEmptyArgsInstance() {
        return new retrieveFunctionExecutionStatus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<FuncExecutionResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<FuncExecutionResponse>() { 
          public void onComplete(FuncExecutionResponse o) {
            retrieveFunctionExecutionStatus_result result = new retrieveFunctionExecutionStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            retrieveFunctionExecutionStatus_result result = new retrieveFunctionExecutionStatus_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveFunctionExecutionStatus_args args, org.apache.thrift.async.AsyncMethodCallback<FuncExecutionResponse> resultHandler) throws org.apache.thrift.TException {
        iface.retrieveFunctionExecutionStatus(args.activationID,resultHandler);
      }
    }

    public static class registerApplicationWorkflow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerApplicationWorkflow_args, RegisterWorkflowResponse> {
      public registerApplicationWorkflow() {
        super("registerApplicationWorkflow");
      }

      public registerApplicationWorkflow_args getEmptyArgsInstance() {
        return new registerApplicationWorkflow_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<RegisterWorkflowResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<RegisterWorkflowResponse>() { 
          public void onComplete(RegisterWorkflowResponse o) {
            registerApplicationWorkflow_result result = new registerApplicationWorkflow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registerApplicationWorkflow_result result = new registerApplicationWorkflow_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerApplicationWorkflow_args args, org.apache.thrift.async.AsyncMethodCallback<RegisterWorkflowResponse> resultHandler) throws org.apache.thrift.TException {
        iface.registerApplicationWorkflow(args.applicationName, args.applicationWorkflowJSON,resultHandler);
      }
    }

    public static class registerWorker<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerWorker_args, RegisterWorkerResponse> {
      public registerWorker() {
        super("registerWorker");
      }

      public registerWorker_args getEmptyArgsInstance() {
        return new registerWorker_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<RegisterWorkerResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<RegisterWorkerResponse>() { 
          public void onComplete(RegisterWorkerResponse o) {
            registerWorker_result result = new registerWorker_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registerWorker_result result = new registerWorker_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerWorker_args args, org.apache.thrift.async.AsyncMethodCallback<RegisterWorkerResponse> resultHandler) throws org.apache.thrift.TException {
        iface.registerWorker(args.registerReq,resultHandler);
      }
    }

    public static class updateResourceUsage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateResourceUsage_args, UpdateResourceResponse> {
      public updateResourceUsage() {
        super("updateResourceUsage");
      }

      public updateResourceUsage_args getEmptyArgsInstance() {
        return new updateResourceUsage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<UpdateResourceResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<UpdateResourceResponse>() { 
          public void onComplete(UpdateResourceResponse o) {
            updateResourceUsage_result result = new updateResourceUsage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateResourceUsage_result result = new updateResourceUsage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateResourceUsage_args args, org.apache.thrift.async.AsyncMethodCallback<UpdateResourceResponse> resultHandler) throws org.apache.thrift.TException {
        iface.updateResourceUsage(args.updateResourceReq, args.nodeID,resultHandler);
      }
    }

    public static class writeFunctionOutput<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeFunctionOutput_args, WriteResultsResponse> {
      public writeFunctionOutput() {
        super("writeFunctionOutput");
      }

      public writeFunctionOutput_args getEmptyArgsInstance() {
        return new writeFunctionOutput_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<WriteResultsResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<WriteResultsResponse>() { 
          public void onComplete(WriteResultsResponse o) {
            writeFunctionOutput_result result = new writeFunctionOutput_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeFunctionOutput_result result = new writeFunctionOutput_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeFunctionOutput_args args, org.apache.thrift.async.AsyncMethodCallback<WriteResultsResponse> resultHandler) throws org.apache.thrift.TException {
        iface.writeFunctionOutput(args.eventID, args.outputset, args.functionName,resultHandler);
      }
    }

  }

  public static class registerFunction_args implements org.apache.thrift.TBase<registerFunction_args, registerFunction_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerFunction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerFunction_args");

    private static final org.apache.thrift.protocol.TField REGISTER_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("registerReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerFunction_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerFunction_argsTupleSchemeFactory();

    public RegisterFunctionRequest registerReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTER_REQ((short)1, "registerReq");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTER_REQ
            return REGISTER_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTER_REQ, new org.apache.thrift.meta_data.FieldMetaData("registerReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegisterFunctionRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerFunction_args.class, metaDataMap);
    }

    public registerFunction_args() {
    }

    public registerFunction_args(
      RegisterFunctionRequest registerReq)
    {
      this();
      this.registerReq = registerReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerFunction_args(registerFunction_args other) {
      if (other.isSetRegisterReq()) {
        this.registerReq = new RegisterFunctionRequest(other.registerReq);
      }
    }

    public registerFunction_args deepCopy() {
      return new registerFunction_args(this);
    }

    @Override
    public void clear() {
      this.registerReq = null;
    }

    public RegisterFunctionRequest getRegisterReq() {
      return this.registerReq;
    }

    public registerFunction_args setRegisterReq(RegisterFunctionRequest registerReq) {
      this.registerReq = registerReq;
      return this;
    }

    public void unsetRegisterReq() {
      this.registerReq = null;
    }

    /** Returns true if field registerReq is set (has been assigned a value) and false otherwise */
    public boolean isSetRegisterReq() {
      return this.registerReq != null;
    }

    public void setRegisterReqIsSet(boolean value) {
      if (!value) {
        this.registerReq = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REGISTER_REQ:
        if (value == null) {
          unsetRegisterReq();
        } else {
          setRegisterReq((RegisterFunctionRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTER_REQ:
        return getRegisterReq();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REGISTER_REQ:
        return isSetRegisterReq();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerFunction_args)
        return this.equals((registerFunction_args)that);
      return false;
    }

    public boolean equals(registerFunction_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_registerReq = true && this.isSetRegisterReq();
      boolean that_present_registerReq = true && that.isSetRegisterReq();
      if (this_present_registerReq || that_present_registerReq) {
        if (!(this_present_registerReq && that_present_registerReq))
          return false;
        if (!this.registerReq.equals(that.registerReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRegisterReq()) ? 131071 : 524287);
      if (isSetRegisterReq())
        hashCode = hashCode * 8191 + registerReq.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerFunction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRegisterReq()).compareTo(other.isSetRegisterReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegisterReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerReq, other.registerReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerFunction_args(");
      boolean first = true;

      sb.append("registerReq:");
      if (this.registerReq == null) {
        sb.append("null");
      } else {
        sb.append(this.registerReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (registerReq != null) {
        registerReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerFunction_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerFunction_argsStandardScheme getScheme() {
        return new registerFunction_argsStandardScheme();
      }
    }

    private static class registerFunction_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerFunction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerFunction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTER_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registerReq = new RegisterFunctionRequest();
                struct.registerReq.read(iprot);
                struct.setRegisterReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerFunction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.registerReq != null) {
          oprot.writeFieldBegin(REGISTER_REQ_FIELD_DESC);
          struct.registerReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerFunction_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerFunction_argsTupleScheme getScheme() {
        return new registerFunction_argsTupleScheme();
      }
    }

    private static class registerFunction_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerFunction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerFunction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRegisterReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRegisterReq()) {
          struct.registerReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerFunction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.registerReq = new RegisterFunctionRequest();
          struct.registerReq.read(iprot);
          struct.setRegisterReqIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registerFunction_result implements org.apache.thrift.TBase<registerFunction_result, registerFunction_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerFunction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerFunction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerFunction_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerFunction_resultTupleSchemeFactory();

    public RegisterFunctionResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegisterFunctionResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerFunction_result.class, metaDataMap);
    }

    public registerFunction_result() {
    }

    public registerFunction_result(
      RegisterFunctionResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerFunction_result(registerFunction_result other) {
      if (other.isSetSuccess()) {
        this.success = new RegisterFunctionResponse(other.success);
      }
    }

    public registerFunction_result deepCopy() {
      return new registerFunction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RegisterFunctionResponse getSuccess() {
      return this.success;
    }

    public registerFunction_result setSuccess(RegisterFunctionResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RegisterFunctionResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerFunction_result)
        return this.equals((registerFunction_result)that);
      return false;
    }

    public boolean equals(registerFunction_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerFunction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerFunction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerFunction_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerFunction_resultStandardScheme getScheme() {
        return new registerFunction_resultStandardScheme();
      }
    }

    private static class registerFunction_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerFunction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerFunction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RegisterFunctionResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerFunction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerFunction_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerFunction_resultTupleScheme getScheme() {
        return new registerFunction_resultTupleScheme();
      }
    }

    private static class registerFunction_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerFunction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerFunction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerFunction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RegisterFunctionResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class executeIncomingRequest_args implements org.apache.thrift.TBase<executeIncomingRequest_args, executeIncomingRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<executeIncomingRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeIncomingRequest_args");

    private static final org.apache.thrift.protocol.TField INCOMING_REQ_PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("incomingReqPayload", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeIncomingRequest_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeIncomingRequest_argsTupleSchemeFactory();

    public ExecuteRequestPayload incomingReqPayload; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INCOMING_REQ_PAYLOAD((short)1, "incomingReqPayload");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INCOMING_REQ_PAYLOAD
            return INCOMING_REQ_PAYLOAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INCOMING_REQ_PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("incomingReqPayload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExecuteRequestPayload.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeIncomingRequest_args.class, metaDataMap);
    }

    public executeIncomingRequest_args() {
    }

    public executeIncomingRequest_args(
      ExecuteRequestPayload incomingReqPayload)
    {
      this();
      this.incomingReqPayload = incomingReqPayload;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeIncomingRequest_args(executeIncomingRequest_args other) {
      if (other.isSetIncomingReqPayload()) {
        this.incomingReqPayload = new ExecuteRequestPayload(other.incomingReqPayload);
      }
    }

    public executeIncomingRequest_args deepCopy() {
      return new executeIncomingRequest_args(this);
    }

    @Override
    public void clear() {
      this.incomingReqPayload = null;
    }

    public ExecuteRequestPayload getIncomingReqPayload() {
      return this.incomingReqPayload;
    }

    public executeIncomingRequest_args setIncomingReqPayload(ExecuteRequestPayload incomingReqPayload) {
      this.incomingReqPayload = incomingReqPayload;
      return this;
    }

    public void unsetIncomingReqPayload() {
      this.incomingReqPayload = null;
    }

    /** Returns true if field incomingReqPayload is set (has been assigned a value) and false otherwise */
    public boolean isSetIncomingReqPayload() {
      return this.incomingReqPayload != null;
    }

    public void setIncomingReqPayloadIsSet(boolean value) {
      if (!value) {
        this.incomingReqPayload = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case INCOMING_REQ_PAYLOAD:
        if (value == null) {
          unsetIncomingReqPayload();
        } else {
          setIncomingReqPayload((ExecuteRequestPayload)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INCOMING_REQ_PAYLOAD:
        return getIncomingReqPayload();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INCOMING_REQ_PAYLOAD:
        return isSetIncomingReqPayload();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof executeIncomingRequest_args)
        return this.equals((executeIncomingRequest_args)that);
      return false;
    }

    public boolean equals(executeIncomingRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_incomingReqPayload = true && this.isSetIncomingReqPayload();
      boolean that_present_incomingReqPayload = true && that.isSetIncomingReqPayload();
      if (this_present_incomingReqPayload || that_present_incomingReqPayload) {
        if (!(this_present_incomingReqPayload && that_present_incomingReqPayload))
          return false;
        if (!this.incomingReqPayload.equals(that.incomingReqPayload))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIncomingReqPayload()) ? 131071 : 524287);
      if (isSetIncomingReqPayload())
        hashCode = hashCode * 8191 + incomingReqPayload.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(executeIncomingRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIncomingReqPayload()).compareTo(other.isSetIncomingReqPayload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIncomingReqPayload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomingReqPayload, other.incomingReqPayload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("executeIncomingRequest_args(");
      boolean first = true;

      sb.append("incomingReqPayload:");
      if (this.incomingReqPayload == null) {
        sb.append("null");
      } else {
        sb.append(this.incomingReqPayload);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (incomingReqPayload != null) {
        incomingReqPayload.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeIncomingRequest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeIncomingRequest_argsStandardScheme getScheme() {
        return new executeIncomingRequest_argsStandardScheme();
      }
    }

    private static class executeIncomingRequest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeIncomingRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeIncomingRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INCOMING_REQ_PAYLOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.incomingReqPayload = new ExecuteRequestPayload();
                struct.incomingReqPayload.read(iprot);
                struct.setIncomingReqPayloadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeIncomingRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.incomingReqPayload != null) {
          oprot.writeFieldBegin(INCOMING_REQ_PAYLOAD_FIELD_DESC);
          struct.incomingReqPayload.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeIncomingRequest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeIncomingRequest_argsTupleScheme getScheme() {
        return new executeIncomingRequest_argsTupleScheme();
      }
    }

    private static class executeIncomingRequest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeIncomingRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeIncomingRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIncomingReqPayload()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIncomingReqPayload()) {
          struct.incomingReqPayload.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeIncomingRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.incomingReqPayload = new ExecuteRequestPayload();
          struct.incomingReqPayload.read(iprot);
          struct.setIncomingReqPayloadIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class executeIncomingRequest_result implements org.apache.thrift.TBase<executeIncomingRequest_result, executeIncomingRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<executeIncomingRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeIncomingRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeIncomingRequest_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeIncomingRequest_resultTupleSchemeFactory();

    public ExecRequestResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExecRequestResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeIncomingRequest_result.class, metaDataMap);
    }

    public executeIncomingRequest_result() {
    }

    public executeIncomingRequest_result(
      ExecRequestResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeIncomingRequest_result(executeIncomingRequest_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExecRequestResponse(other.success);
      }
    }

    public executeIncomingRequest_result deepCopy() {
      return new executeIncomingRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ExecRequestResponse getSuccess() {
      return this.success;
    }

    public executeIncomingRequest_result setSuccess(ExecRequestResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExecRequestResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof executeIncomingRequest_result)
        return this.equals((executeIncomingRequest_result)that);
      return false;
    }

    public boolean equals(executeIncomingRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(executeIncomingRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("executeIncomingRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeIncomingRequest_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeIncomingRequest_resultStandardScheme getScheme() {
        return new executeIncomingRequest_resultStandardScheme();
      }
    }

    private static class executeIncomingRequest_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeIncomingRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeIncomingRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ExecRequestResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeIncomingRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeIncomingRequest_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeIncomingRequest_resultTupleScheme getScheme() {
        return new executeIncomingRequest_resultTupleScheme();
      }
    }

    private static class executeIncomingRequest_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeIncomingRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeIncomingRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeIncomingRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ExecRequestResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class execMultiInputRequest_args implements org.apache.thrift.TBase<execMultiInputRequest_args, execMultiInputRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<execMultiInputRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execMultiInputRequest_args");

    private static final org.apache.thrift.protocol.TField PARAM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("paramList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execMultiInputRequest_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execMultiInputRequest_argsTupleSchemeFactory();

    public java.util.List<Result> paramList; // required
    public java.lang.String eventID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM_LIST((short)1, "paramList"),
      EVENT_ID((short)2, "eventID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM_LIST
            return PARAM_LIST;
          case 2: // EVENT_ID
            return EVENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM_LIST, new org.apache.thrift.meta_data.FieldMetaData("paramList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class))));
      tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execMultiInputRequest_args.class, metaDataMap);
    }

    public execMultiInputRequest_args() {
    }

    public execMultiInputRequest_args(
      java.util.List<Result> paramList,
      java.lang.String eventID)
    {
      this();
      this.paramList = paramList;
      this.eventID = eventID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execMultiInputRequest_args(execMultiInputRequest_args other) {
      if (other.isSetParamList()) {
        java.util.List<Result> __this__paramList = new java.util.ArrayList<Result>(other.paramList.size());
        for (Result other_element : other.paramList) {
          __this__paramList.add(new Result(other_element));
        }
        this.paramList = __this__paramList;
      }
      if (other.isSetEventID()) {
        this.eventID = other.eventID;
      }
    }

    public execMultiInputRequest_args deepCopy() {
      return new execMultiInputRequest_args(this);
    }

    @Override
    public void clear() {
      this.paramList = null;
      this.eventID = null;
    }

    public int getParamListSize() {
      return (this.paramList == null) ? 0 : this.paramList.size();
    }

    public java.util.Iterator<Result> getParamListIterator() {
      return (this.paramList == null) ? null : this.paramList.iterator();
    }

    public void addToParamList(Result elem) {
      if (this.paramList == null) {
        this.paramList = new java.util.ArrayList<Result>();
      }
      this.paramList.add(elem);
    }

    public java.util.List<Result> getParamList() {
      return this.paramList;
    }

    public execMultiInputRequest_args setParamList(java.util.List<Result> paramList) {
      this.paramList = paramList;
      return this;
    }

    public void unsetParamList() {
      this.paramList = null;
    }

    /** Returns true if field paramList is set (has been assigned a value) and false otherwise */
    public boolean isSetParamList() {
      return this.paramList != null;
    }

    public void setParamListIsSet(boolean value) {
      if (!value) {
        this.paramList = null;
      }
    }

    public java.lang.String getEventID() {
      return this.eventID;
    }

    public execMultiInputRequest_args setEventID(java.lang.String eventID) {
      this.eventID = eventID;
      return this;
    }

    public void unsetEventID() {
      this.eventID = null;
    }

    /** Returns true if field eventID is set (has been assigned a value) and false otherwise */
    public boolean isSetEventID() {
      return this.eventID != null;
    }

    public void setEventIDIsSet(boolean value) {
      if (!value) {
        this.eventID = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PARAM_LIST:
        if (value == null) {
          unsetParamList();
        } else {
          setParamList((java.util.List<Result>)value);
        }
        break;

      case EVENT_ID:
        if (value == null) {
          unsetEventID();
        } else {
          setEventID((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM_LIST:
        return getParamList();

      case EVENT_ID:
        return getEventID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PARAM_LIST:
        return isSetParamList();
      case EVENT_ID:
        return isSetEventID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof execMultiInputRequest_args)
        return this.equals((execMultiInputRequest_args)that);
      return false;
    }

    public boolean equals(execMultiInputRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_paramList = true && this.isSetParamList();
      boolean that_present_paramList = true && that.isSetParamList();
      if (this_present_paramList || that_present_paramList) {
        if (!(this_present_paramList && that_present_paramList))
          return false;
        if (!this.paramList.equals(that.paramList))
          return false;
      }

      boolean this_present_eventID = true && this.isSetEventID();
      boolean that_present_eventID = true && that.isSetEventID();
      if (this_present_eventID || that_present_eventID) {
        if (!(this_present_eventID && that_present_eventID))
          return false;
        if (!this.eventID.equals(that.eventID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetParamList()) ? 131071 : 524287);
      if (isSetParamList())
        hashCode = hashCode * 8191 + paramList.hashCode();

      hashCode = hashCode * 8191 + ((isSetEventID()) ? 131071 : 524287);
      if (isSetEventID())
        hashCode = hashCode * 8191 + eventID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(execMultiInputRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetParamList()).compareTo(other.isSetParamList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramList, other.paramList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEventID()).compareTo(other.isSetEventID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventID, other.eventID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("execMultiInputRequest_args(");
      boolean first = true;

      sb.append("paramList:");
      if (this.paramList == null) {
        sb.append("null");
      } else {
        sb.append(this.paramList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eventID:");
      if (this.eventID == null) {
        sb.append("null");
      } else {
        sb.append(this.eventID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execMultiInputRequest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execMultiInputRequest_argsStandardScheme getScheme() {
        return new execMultiInputRequest_argsStandardScheme();
      }
    }

    private static class execMultiInputRequest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<execMultiInputRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execMultiInputRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.paramList = new java.util.ArrayList<Result>(_list16.size);
                  Result _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new Result();
                    _elem17.read(iprot);
                    struct.paramList.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setParamListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EVENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.eventID = iprot.readString();
                struct.setEventIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execMultiInputRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paramList != null) {
          oprot.writeFieldBegin(PARAM_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.paramList.size()));
            for (Result _iter19 : struct.paramList)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.eventID != null) {
          oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
          oprot.writeString(struct.eventID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execMultiInputRequest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execMultiInputRequest_argsTupleScheme getScheme() {
        return new execMultiInputRequest_argsTupleScheme();
      }
    }

    private static class execMultiInputRequest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<execMultiInputRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execMultiInputRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetParamList()) {
          optionals.set(0);
        }
        if (struct.isSetEventID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParamList()) {
          {
            oprot.writeI32(struct.paramList.size());
            for (Result _iter20 : struct.paramList)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetEventID()) {
          oprot.writeString(struct.eventID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execMultiInputRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.paramList = new java.util.ArrayList<Result>(_list21.size);
            Result _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new Result();
              _elem22.read(iprot);
              struct.paramList.add(_elem22);
            }
          }
          struct.setParamListIsSet(true);
        }
        if (incoming.get(1)) {
          struct.eventID = iprot.readString();
          struct.setEventIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class execMultiInputRequest_result implements org.apache.thrift.TBase<execMultiInputRequest_result, execMultiInputRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<execMultiInputRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("execMultiInputRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execMultiInputRequest_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execMultiInputRequest_resultTupleSchemeFactory();

    public ExecRequestResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExecRequestResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execMultiInputRequest_result.class, metaDataMap);
    }

    public execMultiInputRequest_result() {
    }

    public execMultiInputRequest_result(
      ExecRequestResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public execMultiInputRequest_result(execMultiInputRequest_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExecRequestResponse(other.success);
      }
    }

    public execMultiInputRequest_result deepCopy() {
      return new execMultiInputRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ExecRequestResponse getSuccess() {
      return this.success;
    }

    public execMultiInputRequest_result setSuccess(ExecRequestResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ExecRequestResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof execMultiInputRequest_result)
        return this.equals((execMultiInputRequest_result)that);
      return false;
    }

    public boolean equals(execMultiInputRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(execMultiInputRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("execMultiInputRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class execMultiInputRequest_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execMultiInputRequest_resultStandardScheme getScheme() {
        return new execMultiInputRequest_resultStandardScheme();
      }
    }

    private static class execMultiInputRequest_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<execMultiInputRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, execMultiInputRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ExecRequestResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, execMultiInputRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class execMultiInputRequest_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public execMultiInputRequest_resultTupleScheme getScheme() {
        return new execMultiInputRequest_resultTupleScheme();
      }
    }

    private static class execMultiInputRequest_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<execMultiInputRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, execMultiInputRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, execMultiInputRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ExecRequestResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class retrieveFunctionExecutionStatus_args implements org.apache.thrift.TBase<retrieveFunctionExecutionStatus_args, retrieveFunctionExecutionStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveFunctionExecutionStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveFunctionExecutionStatus_args");

    private static final org.apache.thrift.protocol.TField ACTIVATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("activationID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new retrieveFunctionExecutionStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new retrieveFunctionExecutionStatus_argsTupleSchemeFactory();

    public java.lang.String activationID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACTIVATION_ID((short)1, "activationID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACTIVATION_ID
            return ACTIVATION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACTIVATION_ID, new org.apache.thrift.meta_data.FieldMetaData("activationID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveFunctionExecutionStatus_args.class, metaDataMap);
    }

    public retrieveFunctionExecutionStatus_args() {
    }

    public retrieveFunctionExecutionStatus_args(
      java.lang.String activationID)
    {
      this();
      this.activationID = activationID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveFunctionExecutionStatus_args(retrieveFunctionExecutionStatus_args other) {
      if (other.isSetActivationID()) {
        this.activationID = other.activationID;
      }
    }

    public retrieveFunctionExecutionStatus_args deepCopy() {
      return new retrieveFunctionExecutionStatus_args(this);
    }

    @Override
    public void clear() {
      this.activationID = null;
    }

    public java.lang.String getActivationID() {
      return this.activationID;
    }

    public retrieveFunctionExecutionStatus_args setActivationID(java.lang.String activationID) {
      this.activationID = activationID;
      return this;
    }

    public void unsetActivationID() {
      this.activationID = null;
    }

    /** Returns true if field activationID is set (has been assigned a value) and false otherwise */
    public boolean isSetActivationID() {
      return this.activationID != null;
    }

    public void setActivationIDIsSet(boolean value) {
      if (!value) {
        this.activationID = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ACTIVATION_ID:
        if (value == null) {
          unsetActivationID();
        } else {
          setActivationID((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ACTIVATION_ID:
        return getActivationID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ACTIVATION_ID:
        return isSetActivationID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveFunctionExecutionStatus_args)
        return this.equals((retrieveFunctionExecutionStatus_args)that);
      return false;
    }

    public boolean equals(retrieveFunctionExecutionStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_activationID = true && this.isSetActivationID();
      boolean that_present_activationID = true && that.isSetActivationID();
      if (this_present_activationID || that_present_activationID) {
        if (!(this_present_activationID && that_present_activationID))
          return false;
        if (!this.activationID.equals(that.activationID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetActivationID()) ? 131071 : 524287);
      if (isSetActivationID())
        hashCode = hashCode * 8191 + activationID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(retrieveFunctionExecutionStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetActivationID()).compareTo(other.isSetActivationID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActivationID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activationID, other.activationID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("retrieveFunctionExecutionStatus_args(");
      boolean first = true;

      sb.append("activationID:");
      if (this.activationID == null) {
        sb.append("null");
      } else {
        sb.append(this.activationID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveFunctionExecutionStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveFunctionExecutionStatus_argsStandardScheme getScheme() {
        return new retrieveFunctionExecutionStatus_argsStandardScheme();
      }
    }

    private static class retrieveFunctionExecutionStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<retrieveFunctionExecutionStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveFunctionExecutionStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACTIVATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activationID = iprot.readString();
                struct.setActivationIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveFunctionExecutionStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.activationID != null) {
          oprot.writeFieldBegin(ACTIVATION_ID_FIELD_DESC);
          oprot.writeString(struct.activationID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveFunctionExecutionStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveFunctionExecutionStatus_argsTupleScheme getScheme() {
        return new retrieveFunctionExecutionStatus_argsTupleScheme();
      }
    }

    private static class retrieveFunctionExecutionStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<retrieveFunctionExecutionStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveFunctionExecutionStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetActivationID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetActivationID()) {
          oprot.writeString(struct.activationID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveFunctionExecutionStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.activationID = iprot.readString();
          struct.setActivationIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class retrieveFunctionExecutionStatus_result implements org.apache.thrift.TBase<retrieveFunctionExecutionStatus_result, retrieveFunctionExecutionStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveFunctionExecutionStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveFunctionExecutionStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new retrieveFunctionExecutionStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new retrieveFunctionExecutionStatus_resultTupleSchemeFactory();

    public FuncExecutionResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FuncExecutionResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveFunctionExecutionStatus_result.class, metaDataMap);
    }

    public retrieveFunctionExecutionStatus_result() {
    }

    public retrieveFunctionExecutionStatus_result(
      FuncExecutionResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveFunctionExecutionStatus_result(retrieveFunctionExecutionStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new FuncExecutionResponse(other.success);
      }
    }

    public retrieveFunctionExecutionStatus_result deepCopy() {
      return new retrieveFunctionExecutionStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FuncExecutionResponse getSuccess() {
      return this.success;
    }

    public retrieveFunctionExecutionStatus_result setSuccess(FuncExecutionResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FuncExecutionResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveFunctionExecutionStatus_result)
        return this.equals((retrieveFunctionExecutionStatus_result)that);
      return false;
    }

    public boolean equals(retrieveFunctionExecutionStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(retrieveFunctionExecutionStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("retrieveFunctionExecutionStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveFunctionExecutionStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveFunctionExecutionStatus_resultStandardScheme getScheme() {
        return new retrieveFunctionExecutionStatus_resultStandardScheme();
      }
    }

    private static class retrieveFunctionExecutionStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<retrieveFunctionExecutionStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveFunctionExecutionStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FuncExecutionResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveFunctionExecutionStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveFunctionExecutionStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveFunctionExecutionStatus_resultTupleScheme getScheme() {
        return new retrieveFunctionExecutionStatus_resultTupleScheme();
      }
    }

    private static class retrieveFunctionExecutionStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<retrieveFunctionExecutionStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveFunctionExecutionStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveFunctionExecutionStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FuncExecutionResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registerApplicationWorkflow_args implements org.apache.thrift.TBase<registerApplicationWorkflow_args, registerApplicationWorkflow_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerApplicationWorkflow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerApplicationWorkflow_args");

    private static final org.apache.thrift.protocol.TField APPLICATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APPLICATION_WORKFLOW_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationWorkflowJSON", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerApplicationWorkflow_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerApplicationWorkflow_argsTupleSchemeFactory();

    public java.lang.String applicationName; // required
    public java.lang.String applicationWorkflowJSON; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLICATION_NAME((short)1, "applicationName"),
      APPLICATION_WORKFLOW_JSON((short)2, "applicationWorkflowJSON");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLICATION_NAME
            return APPLICATION_NAME;
          case 2: // APPLICATION_WORKFLOW_JSON
            return APPLICATION_WORKFLOW_JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLICATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("applicationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APPLICATION_WORKFLOW_JSON, new org.apache.thrift.meta_data.FieldMetaData("applicationWorkflowJSON", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerApplicationWorkflow_args.class, metaDataMap);
    }

    public registerApplicationWorkflow_args() {
    }

    public registerApplicationWorkflow_args(
      java.lang.String applicationName,
      java.lang.String applicationWorkflowJSON)
    {
      this();
      this.applicationName = applicationName;
      this.applicationWorkflowJSON = applicationWorkflowJSON;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerApplicationWorkflow_args(registerApplicationWorkflow_args other) {
      if (other.isSetApplicationName()) {
        this.applicationName = other.applicationName;
      }
      if (other.isSetApplicationWorkflowJSON()) {
        this.applicationWorkflowJSON = other.applicationWorkflowJSON;
      }
    }

    public registerApplicationWorkflow_args deepCopy() {
      return new registerApplicationWorkflow_args(this);
    }

    @Override
    public void clear() {
      this.applicationName = null;
      this.applicationWorkflowJSON = null;
    }

    public java.lang.String getApplicationName() {
      return this.applicationName;
    }

    public registerApplicationWorkflow_args setApplicationName(java.lang.String applicationName) {
      this.applicationName = applicationName;
      return this;
    }

    public void unsetApplicationName() {
      this.applicationName = null;
    }

    /** Returns true if field applicationName is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationName() {
      return this.applicationName != null;
    }

    public void setApplicationNameIsSet(boolean value) {
      if (!value) {
        this.applicationName = null;
      }
    }

    public java.lang.String getApplicationWorkflowJSON() {
      return this.applicationWorkflowJSON;
    }

    public registerApplicationWorkflow_args setApplicationWorkflowJSON(java.lang.String applicationWorkflowJSON) {
      this.applicationWorkflowJSON = applicationWorkflowJSON;
      return this;
    }

    public void unsetApplicationWorkflowJSON() {
      this.applicationWorkflowJSON = null;
    }

    /** Returns true if field applicationWorkflowJSON is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationWorkflowJSON() {
      return this.applicationWorkflowJSON != null;
    }

    public void setApplicationWorkflowJSONIsSet(boolean value) {
      if (!value) {
        this.applicationWorkflowJSON = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case APPLICATION_NAME:
        if (value == null) {
          unsetApplicationName();
        } else {
          setApplicationName((java.lang.String)value);
        }
        break;

      case APPLICATION_WORKFLOW_JSON:
        if (value == null) {
          unsetApplicationWorkflowJSON();
        } else {
          setApplicationWorkflowJSON((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLICATION_NAME:
        return getApplicationName();

      case APPLICATION_WORKFLOW_JSON:
        return getApplicationWorkflowJSON();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case APPLICATION_NAME:
        return isSetApplicationName();
      case APPLICATION_WORKFLOW_JSON:
        return isSetApplicationWorkflowJSON();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerApplicationWorkflow_args)
        return this.equals((registerApplicationWorkflow_args)that);
      return false;
    }

    public boolean equals(registerApplicationWorkflow_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_applicationName = true && this.isSetApplicationName();
      boolean that_present_applicationName = true && that.isSetApplicationName();
      if (this_present_applicationName || that_present_applicationName) {
        if (!(this_present_applicationName && that_present_applicationName))
          return false;
        if (!this.applicationName.equals(that.applicationName))
          return false;
      }

      boolean this_present_applicationWorkflowJSON = true && this.isSetApplicationWorkflowJSON();
      boolean that_present_applicationWorkflowJSON = true && that.isSetApplicationWorkflowJSON();
      if (this_present_applicationWorkflowJSON || that_present_applicationWorkflowJSON) {
        if (!(this_present_applicationWorkflowJSON && that_present_applicationWorkflowJSON))
          return false;
        if (!this.applicationWorkflowJSON.equals(that.applicationWorkflowJSON))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetApplicationName()) ? 131071 : 524287);
      if (isSetApplicationName())
        hashCode = hashCode * 8191 + applicationName.hashCode();

      hashCode = hashCode * 8191 + ((isSetApplicationWorkflowJSON()) ? 131071 : 524287);
      if (isSetApplicationWorkflowJSON())
        hashCode = hashCode * 8191 + applicationWorkflowJSON.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerApplicationWorkflow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetApplicationName()).compareTo(other.isSetApplicationName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationName, other.applicationName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApplicationWorkflowJSON()).compareTo(other.isSetApplicationWorkflowJSON());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationWorkflowJSON()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationWorkflowJSON, other.applicationWorkflowJSON);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerApplicationWorkflow_args(");
      boolean first = true;

      sb.append("applicationName:");
      if (this.applicationName == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applicationWorkflowJSON:");
      if (this.applicationWorkflowJSON == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationWorkflowJSON);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerApplicationWorkflow_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerApplicationWorkflow_argsStandardScheme getScheme() {
        return new registerApplicationWorkflow_argsStandardScheme();
      }
    }

    private static class registerApplicationWorkflow_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerApplicationWorkflow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerApplicationWorkflow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLICATION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationName = iprot.readString();
                struct.setApplicationNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLICATION_WORKFLOW_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationWorkflowJSON = iprot.readString();
                struct.setApplicationWorkflowJSONIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerApplicationWorkflow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applicationName != null) {
          oprot.writeFieldBegin(APPLICATION_NAME_FIELD_DESC);
          oprot.writeString(struct.applicationName);
          oprot.writeFieldEnd();
        }
        if (struct.applicationWorkflowJSON != null) {
          oprot.writeFieldBegin(APPLICATION_WORKFLOW_JSON_FIELD_DESC);
          oprot.writeString(struct.applicationWorkflowJSON);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerApplicationWorkflow_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerApplicationWorkflow_argsTupleScheme getScheme() {
        return new registerApplicationWorkflow_argsTupleScheme();
      }
    }

    private static class registerApplicationWorkflow_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerApplicationWorkflow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerApplicationWorkflow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetApplicationName()) {
          optionals.set(0);
        }
        if (struct.isSetApplicationWorkflowJSON()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetApplicationName()) {
          oprot.writeString(struct.applicationName);
        }
        if (struct.isSetApplicationWorkflowJSON()) {
          oprot.writeString(struct.applicationWorkflowJSON);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerApplicationWorkflow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.applicationName = iprot.readString();
          struct.setApplicationNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applicationWorkflowJSON = iprot.readString();
          struct.setApplicationWorkflowJSONIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registerApplicationWorkflow_result implements org.apache.thrift.TBase<registerApplicationWorkflow_result, registerApplicationWorkflow_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerApplicationWorkflow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerApplicationWorkflow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerApplicationWorkflow_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerApplicationWorkflow_resultTupleSchemeFactory();

    public RegisterWorkflowResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegisterWorkflowResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerApplicationWorkflow_result.class, metaDataMap);
    }

    public registerApplicationWorkflow_result() {
    }

    public registerApplicationWorkflow_result(
      RegisterWorkflowResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerApplicationWorkflow_result(registerApplicationWorkflow_result other) {
      if (other.isSetSuccess()) {
        this.success = new RegisterWorkflowResponse(other.success);
      }
    }

    public registerApplicationWorkflow_result deepCopy() {
      return new registerApplicationWorkflow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RegisterWorkflowResponse getSuccess() {
      return this.success;
    }

    public registerApplicationWorkflow_result setSuccess(RegisterWorkflowResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RegisterWorkflowResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerApplicationWorkflow_result)
        return this.equals((registerApplicationWorkflow_result)that);
      return false;
    }

    public boolean equals(registerApplicationWorkflow_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerApplicationWorkflow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerApplicationWorkflow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerApplicationWorkflow_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerApplicationWorkflow_resultStandardScheme getScheme() {
        return new registerApplicationWorkflow_resultStandardScheme();
      }
    }

    private static class registerApplicationWorkflow_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerApplicationWorkflow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerApplicationWorkflow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RegisterWorkflowResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerApplicationWorkflow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerApplicationWorkflow_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerApplicationWorkflow_resultTupleScheme getScheme() {
        return new registerApplicationWorkflow_resultTupleScheme();
      }
    }

    private static class registerApplicationWorkflow_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerApplicationWorkflow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerApplicationWorkflow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerApplicationWorkflow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RegisterWorkflowResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registerWorker_args implements org.apache.thrift.TBase<registerWorker_args, registerWorker_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerWorker_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerWorker_args");

    private static final org.apache.thrift.protocol.TField REGISTER_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("registerReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerWorker_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerWorker_argsTupleSchemeFactory();

    public RegisterWorkerRequest registerReq; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTER_REQ((short)1, "registerReq");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTER_REQ
            return REGISTER_REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTER_REQ, new org.apache.thrift.meta_data.FieldMetaData("registerReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegisterWorkerRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerWorker_args.class, metaDataMap);
    }

    public registerWorker_args() {
    }

    public registerWorker_args(
      RegisterWorkerRequest registerReq)
    {
      this();
      this.registerReq = registerReq;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWorker_args(registerWorker_args other) {
      if (other.isSetRegisterReq()) {
        this.registerReq = new RegisterWorkerRequest(other.registerReq);
      }
    }

    public registerWorker_args deepCopy() {
      return new registerWorker_args(this);
    }

    @Override
    public void clear() {
      this.registerReq = null;
    }

    public RegisterWorkerRequest getRegisterReq() {
      return this.registerReq;
    }

    public registerWorker_args setRegisterReq(RegisterWorkerRequest registerReq) {
      this.registerReq = registerReq;
      return this;
    }

    public void unsetRegisterReq() {
      this.registerReq = null;
    }

    /** Returns true if field registerReq is set (has been assigned a value) and false otherwise */
    public boolean isSetRegisterReq() {
      return this.registerReq != null;
    }

    public void setRegisterReqIsSet(boolean value) {
      if (!value) {
        this.registerReq = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REGISTER_REQ:
        if (value == null) {
          unsetRegisterReq();
        } else {
          setRegisterReq((RegisterWorkerRequest)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTER_REQ:
        return getRegisterReq();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REGISTER_REQ:
        return isSetRegisterReq();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWorker_args)
        return this.equals((registerWorker_args)that);
      return false;
    }

    public boolean equals(registerWorker_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_registerReq = true && this.isSetRegisterReq();
      boolean that_present_registerReq = true && that.isSetRegisterReq();
      if (this_present_registerReq || that_present_registerReq) {
        if (!(this_present_registerReq && that_present_registerReq))
          return false;
        if (!this.registerReq.equals(that.registerReq))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRegisterReq()) ? 131071 : 524287);
      if (isSetRegisterReq())
        hashCode = hashCode * 8191 + registerReq.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerWorker_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRegisterReq()).compareTo(other.isSetRegisterReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegisterReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerReq, other.registerReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerWorker_args(");
      boolean first = true;

      sb.append("registerReq:");
      if (this.registerReq == null) {
        sb.append("null");
      } else {
        sb.append(this.registerReq);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (registerReq != null) {
        registerReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerWorker_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerWorker_argsStandardScheme getScheme() {
        return new registerWorker_argsStandardScheme();
      }
    }

    private static class registerWorker_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerWorker_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerWorker_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTER_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registerReq = new RegisterWorkerRequest();
                struct.registerReq.read(iprot);
                struct.setRegisterReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerWorker_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.registerReq != null) {
          oprot.writeFieldBegin(REGISTER_REQ_FIELD_DESC);
          struct.registerReq.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerWorker_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerWorker_argsTupleScheme getScheme() {
        return new registerWorker_argsTupleScheme();
      }
    }

    private static class registerWorker_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerWorker_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerWorker_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRegisterReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRegisterReq()) {
          struct.registerReq.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerWorker_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.registerReq = new RegisterWorkerRequest();
          struct.registerReq.read(iprot);
          struct.setRegisterReqIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registerWorker_result implements org.apache.thrift.TBase<registerWorker_result, registerWorker_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerWorker_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerWorker_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerWorker_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerWorker_resultTupleSchemeFactory();

    public RegisterWorkerResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegisterWorkerResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerWorker_result.class, metaDataMap);
    }

    public registerWorker_result() {
    }

    public registerWorker_result(
      RegisterWorkerResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWorker_result(registerWorker_result other) {
      if (other.isSetSuccess()) {
        this.success = new RegisterWorkerResponse(other.success);
      }
    }

    public registerWorker_result deepCopy() {
      return new registerWorker_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RegisterWorkerResponse getSuccess() {
      return this.success;
    }

    public registerWorker_result setSuccess(RegisterWorkerResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RegisterWorkerResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWorker_result)
        return this.equals((registerWorker_result)that);
      return false;
    }

    public boolean equals(registerWorker_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerWorker_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerWorker_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerWorker_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerWorker_resultStandardScheme getScheme() {
        return new registerWorker_resultStandardScheme();
      }
    }

    private static class registerWorker_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerWorker_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerWorker_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RegisterWorkerResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerWorker_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerWorker_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerWorker_resultTupleScheme getScheme() {
        return new registerWorker_resultTupleScheme();
      }
    }

    private static class registerWorker_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerWorker_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerWorker_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerWorker_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RegisterWorkerResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateResourceUsage_args implements org.apache.thrift.TBase<updateResourceUsage_args, updateResourceUsage_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateResourceUsage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateResourceUsage_args");

    private static final org.apache.thrift.protocol.TField UPDATE_RESOURCE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("updateResourceReq", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateResourceUsage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateResourceUsage_argsTupleSchemeFactory();

    public UpdateResourceRequest updateResourceReq; // required
    public java.lang.String nodeID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPDATE_RESOURCE_REQ((short)1, "updateResourceReq"),
      NODE_ID((short)2, "nodeID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPDATE_RESOURCE_REQ
            return UPDATE_RESOURCE_REQ;
          case 2: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPDATE_RESOURCE_REQ, new org.apache.thrift.meta_data.FieldMetaData("updateResourceReq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UpdateResourceRequest.class)));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateResourceUsage_args.class, metaDataMap);
    }

    public updateResourceUsage_args() {
    }

    public updateResourceUsage_args(
      UpdateResourceRequest updateResourceReq,
      java.lang.String nodeID)
    {
      this();
      this.updateResourceReq = updateResourceReq;
      this.nodeID = nodeID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateResourceUsage_args(updateResourceUsage_args other) {
      if (other.isSetUpdateResourceReq()) {
        this.updateResourceReq = new UpdateResourceRequest(other.updateResourceReq);
      }
      if (other.isSetNodeID()) {
        this.nodeID = other.nodeID;
      }
    }

    public updateResourceUsage_args deepCopy() {
      return new updateResourceUsage_args(this);
    }

    @Override
    public void clear() {
      this.updateResourceReq = null;
      this.nodeID = null;
    }

    public UpdateResourceRequest getUpdateResourceReq() {
      return this.updateResourceReq;
    }

    public updateResourceUsage_args setUpdateResourceReq(UpdateResourceRequest updateResourceReq) {
      this.updateResourceReq = updateResourceReq;
      return this;
    }

    public void unsetUpdateResourceReq() {
      this.updateResourceReq = null;
    }

    /** Returns true if field updateResourceReq is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateResourceReq() {
      return this.updateResourceReq != null;
    }

    public void setUpdateResourceReqIsSet(boolean value) {
      if (!value) {
        this.updateResourceReq = null;
      }
    }

    public java.lang.String getNodeID() {
      return this.nodeID;
    }

    public updateResourceUsage_args setNodeID(java.lang.String nodeID) {
      this.nodeID = nodeID;
      return this;
    }

    public void unsetNodeID() {
      this.nodeID = null;
    }

    /** Returns true if field nodeID is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeID() {
      return this.nodeID != null;
    }

    public void setNodeIDIsSet(boolean value) {
      if (!value) {
        this.nodeID = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UPDATE_RESOURCE_REQ:
        if (value == null) {
          unsetUpdateResourceReq();
        } else {
          setUpdateResourceReq((UpdateResourceRequest)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeID();
        } else {
          setNodeID((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UPDATE_RESOURCE_REQ:
        return getUpdateResourceReq();

      case NODE_ID:
        return getNodeID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UPDATE_RESOURCE_REQ:
        return isSetUpdateResourceReq();
      case NODE_ID:
        return isSetNodeID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateResourceUsage_args)
        return this.equals((updateResourceUsage_args)that);
      return false;
    }

    public boolean equals(updateResourceUsage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_updateResourceReq = true && this.isSetUpdateResourceReq();
      boolean that_present_updateResourceReq = true && that.isSetUpdateResourceReq();
      if (this_present_updateResourceReq || that_present_updateResourceReq) {
        if (!(this_present_updateResourceReq && that_present_updateResourceReq))
          return false;
        if (!this.updateResourceReq.equals(that.updateResourceReq))
          return false;
      }

      boolean this_present_nodeID = true && this.isSetNodeID();
      boolean that_present_nodeID = true && that.isSetNodeID();
      if (this_present_nodeID || that_present_nodeID) {
        if (!(this_present_nodeID && that_present_nodeID))
          return false;
        if (!this.nodeID.equals(that.nodeID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUpdateResourceReq()) ? 131071 : 524287);
      if (isSetUpdateResourceReq())
        hashCode = hashCode * 8191 + updateResourceReq.hashCode();

      hashCode = hashCode * 8191 + ((isSetNodeID()) ? 131071 : 524287);
      if (isSetNodeID())
        hashCode = hashCode * 8191 + nodeID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateResourceUsage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUpdateResourceReq()).compareTo(other.isSetUpdateResourceReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateResourceReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateResourceReq, other.updateResourceReq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodeID()).compareTo(other.isSetNodeID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeID, other.nodeID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateResourceUsage_args(");
      boolean first = true;

      sb.append("updateResourceReq:");
      if (this.updateResourceReq == null) {
        sb.append("null");
      } else {
        sb.append(this.updateResourceReq);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeID:");
      if (this.nodeID == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (updateResourceReq != null) {
        updateResourceReq.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateResourceUsage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateResourceUsage_argsStandardScheme getScheme() {
        return new updateResourceUsage_argsStandardScheme();
      }
    }

    private static class updateResourceUsage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateResourceUsage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateResourceUsage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPDATE_RESOURCE_REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.updateResourceReq = new UpdateResourceRequest();
                struct.updateResourceReq.read(iprot);
                struct.setUpdateResourceReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeID = iprot.readString();
                struct.setNodeIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateResourceUsage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.updateResourceReq != null) {
          oprot.writeFieldBegin(UPDATE_RESOURCE_REQ_FIELD_DESC);
          struct.updateResourceReq.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.nodeID != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateResourceUsage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateResourceUsage_argsTupleScheme getScheme() {
        return new updateResourceUsage_argsTupleScheme();
      }
    }

    private static class updateResourceUsage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateResourceUsage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateResourceUsage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUpdateResourceReq()) {
          optionals.set(0);
        }
        if (struct.isSetNodeID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUpdateResourceReq()) {
          struct.updateResourceReq.write(oprot);
        }
        if (struct.isSetNodeID()) {
          oprot.writeString(struct.nodeID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateResourceUsage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.updateResourceReq = new UpdateResourceRequest();
          struct.updateResourceReq.read(iprot);
          struct.setUpdateResourceReqIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeID = iprot.readString();
          struct.setNodeIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateResourceUsage_result implements org.apache.thrift.TBase<updateResourceUsage_result, updateResourceUsage_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateResourceUsage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateResourceUsage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateResourceUsage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateResourceUsage_resultTupleSchemeFactory();

    public UpdateResourceResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UpdateResourceResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateResourceUsage_result.class, metaDataMap);
    }

    public updateResourceUsage_result() {
    }

    public updateResourceUsage_result(
      UpdateResourceResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateResourceUsage_result(updateResourceUsage_result other) {
      if (other.isSetSuccess()) {
        this.success = new UpdateResourceResponse(other.success);
      }
    }

    public updateResourceUsage_result deepCopy() {
      return new updateResourceUsage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UpdateResourceResponse getSuccess() {
      return this.success;
    }

    public updateResourceUsage_result setSuccess(UpdateResourceResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UpdateResourceResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateResourceUsage_result)
        return this.equals((updateResourceUsage_result)that);
      return false;
    }

    public boolean equals(updateResourceUsage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateResourceUsage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateResourceUsage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateResourceUsage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateResourceUsage_resultStandardScheme getScheme() {
        return new updateResourceUsage_resultStandardScheme();
      }
    }

    private static class updateResourceUsage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateResourceUsage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateResourceUsage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UpdateResourceResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateResourceUsage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateResourceUsage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateResourceUsage_resultTupleScheme getScheme() {
        return new updateResourceUsage_resultTupleScheme();
      }
    }

    private static class updateResourceUsage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateResourceUsage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateResourceUsage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateResourceUsage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UpdateResourceResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeFunctionOutput_args implements org.apache.thrift.TBase<writeFunctionOutput_args, writeFunctionOutput_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeFunctionOutput_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeFunctionOutput_args");

    private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OUTPUTSET_FIELD_DESC = new org.apache.thrift.protocol.TField("outputset", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField FUNCTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("functionName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeFunctionOutput_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeFunctionOutput_argsTupleSchemeFactory();

    public java.lang.String eventID; // required
    public java.util.List<Result> outputset; // required
    public java.lang.String functionName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_ID((short)1, "eventID"),
      OUTPUTSET((short)2, "outputset"),
      FUNCTION_NAME((short)3, "functionName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_ID
            return EVENT_ID;
          case 2: // OUTPUTSET
            return OUTPUTSET;
          case 3: // FUNCTION_NAME
            return FUNCTION_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUTSET, new org.apache.thrift.meta_data.FieldMetaData("outputset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class))));
      tmpMap.put(_Fields.FUNCTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("functionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeFunctionOutput_args.class, metaDataMap);
    }

    public writeFunctionOutput_args() {
    }

    public writeFunctionOutput_args(
      java.lang.String eventID,
      java.util.List<Result> outputset,
      java.lang.String functionName)
    {
      this();
      this.eventID = eventID;
      this.outputset = outputset;
      this.functionName = functionName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeFunctionOutput_args(writeFunctionOutput_args other) {
      if (other.isSetEventID()) {
        this.eventID = other.eventID;
      }
      if (other.isSetOutputset()) {
        java.util.List<Result> __this__outputset = new java.util.ArrayList<Result>(other.outputset.size());
        for (Result other_element : other.outputset) {
          __this__outputset.add(new Result(other_element));
        }
        this.outputset = __this__outputset;
      }
      if (other.isSetFunctionName()) {
        this.functionName = other.functionName;
      }
    }

    public writeFunctionOutput_args deepCopy() {
      return new writeFunctionOutput_args(this);
    }

    @Override
    public void clear() {
      this.eventID = null;
      this.outputset = null;
      this.functionName = null;
    }

    public java.lang.String getEventID() {
      return this.eventID;
    }

    public writeFunctionOutput_args setEventID(java.lang.String eventID) {
      this.eventID = eventID;
      return this;
    }

    public void unsetEventID() {
      this.eventID = null;
    }

    /** Returns true if field eventID is set (has been assigned a value) and false otherwise */
    public boolean isSetEventID() {
      return this.eventID != null;
    }

    public void setEventIDIsSet(boolean value) {
      if (!value) {
        this.eventID = null;
      }
    }

    public int getOutputsetSize() {
      return (this.outputset == null) ? 0 : this.outputset.size();
    }

    public java.util.Iterator<Result> getOutputsetIterator() {
      return (this.outputset == null) ? null : this.outputset.iterator();
    }

    public void addToOutputset(Result elem) {
      if (this.outputset == null) {
        this.outputset = new java.util.ArrayList<Result>();
      }
      this.outputset.add(elem);
    }

    public java.util.List<Result> getOutputset() {
      return this.outputset;
    }

    public writeFunctionOutput_args setOutputset(java.util.List<Result> outputset) {
      this.outputset = outputset;
      return this;
    }

    public void unsetOutputset() {
      this.outputset = null;
    }

    /** Returns true if field outputset is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputset() {
      return this.outputset != null;
    }

    public void setOutputsetIsSet(boolean value) {
      if (!value) {
        this.outputset = null;
      }
    }

    public java.lang.String getFunctionName() {
      return this.functionName;
    }

    public writeFunctionOutput_args setFunctionName(java.lang.String functionName) {
      this.functionName = functionName;
      return this;
    }

    public void unsetFunctionName() {
      this.functionName = null;
    }

    /** Returns true if field functionName is set (has been assigned a value) and false otherwise */
    public boolean isSetFunctionName() {
      return this.functionName != null;
    }

    public void setFunctionNameIsSet(boolean value) {
      if (!value) {
        this.functionName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EVENT_ID:
        if (value == null) {
          unsetEventID();
        } else {
          setEventID((java.lang.String)value);
        }
        break;

      case OUTPUTSET:
        if (value == null) {
          unsetOutputset();
        } else {
          setOutputset((java.util.List<Result>)value);
        }
        break;

      case FUNCTION_NAME:
        if (value == null) {
          unsetFunctionName();
        } else {
          setFunctionName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_ID:
        return getEventID();

      case OUTPUTSET:
        return getOutputset();

      case FUNCTION_NAME:
        return getFunctionName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EVENT_ID:
        return isSetEventID();
      case OUTPUTSET:
        return isSetOutputset();
      case FUNCTION_NAME:
        return isSetFunctionName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeFunctionOutput_args)
        return this.equals((writeFunctionOutput_args)that);
      return false;
    }

    public boolean equals(writeFunctionOutput_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_eventID = true && this.isSetEventID();
      boolean that_present_eventID = true && that.isSetEventID();
      if (this_present_eventID || that_present_eventID) {
        if (!(this_present_eventID && that_present_eventID))
          return false;
        if (!this.eventID.equals(that.eventID))
          return false;
      }

      boolean this_present_outputset = true && this.isSetOutputset();
      boolean that_present_outputset = true && that.isSetOutputset();
      if (this_present_outputset || that_present_outputset) {
        if (!(this_present_outputset && that_present_outputset))
          return false;
        if (!this.outputset.equals(that.outputset))
          return false;
      }

      boolean this_present_functionName = true && this.isSetFunctionName();
      boolean that_present_functionName = true && that.isSetFunctionName();
      if (this_present_functionName || that_present_functionName) {
        if (!(this_present_functionName && that_present_functionName))
          return false;
        if (!this.functionName.equals(that.functionName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEventID()) ? 131071 : 524287);
      if (isSetEventID())
        hashCode = hashCode * 8191 + eventID.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputset()) ? 131071 : 524287);
      if (isSetOutputset())
        hashCode = hashCode * 8191 + outputset.hashCode();

      hashCode = hashCode * 8191 + ((isSetFunctionName()) ? 131071 : 524287);
      if (isSetFunctionName())
        hashCode = hashCode * 8191 + functionName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeFunctionOutput_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEventID()).compareTo(other.isSetEventID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventID, other.eventID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputset()).compareTo(other.isSetOutputset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputset, other.outputset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFunctionName()).compareTo(other.isSetFunctionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFunctionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functionName, other.functionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeFunctionOutput_args(");
      boolean first = true;

      sb.append("eventID:");
      if (this.eventID == null) {
        sb.append("null");
      } else {
        sb.append(this.eventID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputset:");
      if (this.outputset == null) {
        sb.append("null");
      } else {
        sb.append(this.outputset);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("functionName:");
      if (this.functionName == null) {
        sb.append("null");
      } else {
        sb.append(this.functionName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeFunctionOutput_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeFunctionOutput_argsStandardScheme getScheme() {
        return new writeFunctionOutput_argsStandardScheme();
      }
    }

    private static class writeFunctionOutput_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeFunctionOutput_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeFunctionOutput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.eventID = iprot.readString();
                struct.setEventIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTPUTSET
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.outputset = new java.util.ArrayList<Result>(_list24.size);
                  Result _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new Result();
                    _elem25.read(iprot);
                    struct.outputset.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setOutputsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FUNCTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.functionName = iprot.readString();
                struct.setFunctionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeFunctionOutput_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eventID != null) {
          oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
          oprot.writeString(struct.eventID);
          oprot.writeFieldEnd();
        }
        if (struct.outputset != null) {
          oprot.writeFieldBegin(OUTPUTSET_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.outputset.size()));
            for (Result _iter27 : struct.outputset)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.functionName != null) {
          oprot.writeFieldBegin(FUNCTION_NAME_FIELD_DESC);
          oprot.writeString(struct.functionName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeFunctionOutput_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeFunctionOutput_argsTupleScheme getScheme() {
        return new writeFunctionOutput_argsTupleScheme();
      }
    }

    private static class writeFunctionOutput_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeFunctionOutput_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeFunctionOutput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEventID()) {
          optionals.set(0);
        }
        if (struct.isSetOutputset()) {
          optionals.set(1);
        }
        if (struct.isSetFunctionName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEventID()) {
          oprot.writeString(struct.eventID);
        }
        if (struct.isSetOutputset()) {
          {
            oprot.writeI32(struct.outputset.size());
            for (Result _iter28 : struct.outputset)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetFunctionName()) {
          oprot.writeString(struct.functionName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeFunctionOutput_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.eventID = iprot.readString();
          struct.setEventIDIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.outputset = new java.util.ArrayList<Result>(_list29.size);
            Result _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new Result();
              _elem30.read(iprot);
              struct.outputset.add(_elem30);
            }
          }
          struct.setOutputsetIsSet(true);
        }
        if (incoming.get(2)) {
          struct.functionName = iprot.readString();
          struct.setFunctionNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeFunctionOutput_result implements org.apache.thrift.TBase<writeFunctionOutput_result, writeFunctionOutput_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeFunctionOutput_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeFunctionOutput_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeFunctionOutput_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeFunctionOutput_resultTupleSchemeFactory();

    public WriteResultsResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WriteResultsResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeFunctionOutput_result.class, metaDataMap);
    }

    public writeFunctionOutput_result() {
    }

    public writeFunctionOutput_result(
      WriteResultsResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeFunctionOutput_result(writeFunctionOutput_result other) {
      if (other.isSetSuccess()) {
        this.success = new WriteResultsResponse(other.success);
      }
    }

    public writeFunctionOutput_result deepCopy() {
      return new writeFunctionOutput_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WriteResultsResponse getSuccess() {
      return this.success;
    }

    public writeFunctionOutput_result setSuccess(WriteResultsResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WriteResultsResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeFunctionOutput_result)
        return this.equals((writeFunctionOutput_result)that);
      return false;
    }

    public boolean equals(writeFunctionOutput_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeFunctionOutput_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeFunctionOutput_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeFunctionOutput_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeFunctionOutput_resultStandardScheme getScheme() {
        return new writeFunctionOutput_resultStandardScheme();
      }
    }

    private static class writeFunctionOutput_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeFunctionOutput_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeFunctionOutput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WriteResultsResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeFunctionOutput_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeFunctionOutput_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeFunctionOutput_resultTupleScheme getScheme() {
        return new writeFunctionOutput_resultTupleScheme();
      }
    }

    private static class writeFunctionOutput_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeFunctionOutput_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeFunctionOutput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeFunctionOutput_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WriteResultsResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
