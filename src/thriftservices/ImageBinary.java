/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftservices;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2022-03-09")
public class ImageBinary implements org.apache.thrift.TBase<ImageBinary, ImageBinary._Fields>, java.io.Serializable, Cloneable, Comparable<ImageBinary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImageBinary");

  private static final org.apache.thrift.protocol.TField IMAGE_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("imageFile", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("fileLength", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImageBinaryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImageBinaryTupleSchemeFactory();

  public java.nio.ByteBuffer imageFile; // required
  public int fileLength; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IMAGE_FILE((short)1, "imageFile"),
    FILE_LENGTH((short)2, "fileLength");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMAGE_FILE
          return IMAGE_FILE;
        case 2: // FILE_LENGTH
          return FILE_LENGTH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FILELENGTH_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMAGE_FILE, new org.apache.thrift.meta_data.FieldMetaData("imageFile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.FILE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("fileLength", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImageBinary.class, metaDataMap);
  }

  public ImageBinary() {
  }

  public ImageBinary(
    java.nio.ByteBuffer imageFile,
    int fileLength)
  {
    this();
    this.imageFile = org.apache.thrift.TBaseHelper.copyBinary(imageFile);
    this.fileLength = fileLength;
    setFileLengthIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImageBinary(ImageBinary other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetImageFile()) {
      this.imageFile = org.apache.thrift.TBaseHelper.copyBinary(other.imageFile);
    }
    this.fileLength = other.fileLength;
  }

  public ImageBinary deepCopy() {
    return new ImageBinary(this);
  }

  @Override
  public void clear() {
    this.imageFile = null;
    setFileLengthIsSet(false);
    this.fileLength = 0;
  }

  public byte[] getImageFile() {
    setImageFile(org.apache.thrift.TBaseHelper.rightSize(imageFile));
    return imageFile == null ? null : imageFile.array();
  }

  public java.nio.ByteBuffer bufferForImageFile() {
    return org.apache.thrift.TBaseHelper.copyBinary(imageFile);
  }

  public ImageBinary setImageFile(byte[] imageFile) {
    this.imageFile = imageFile == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(imageFile.clone());
    return this;
  }

  public ImageBinary setImageFile(java.nio.ByteBuffer imageFile) {
    this.imageFile = org.apache.thrift.TBaseHelper.copyBinary(imageFile);
    return this;
  }

  public void unsetImageFile() {
    this.imageFile = null;
  }

  /** Returns true if field imageFile is set (has been assigned a value) and false otherwise */
  public boolean isSetImageFile() {
    return this.imageFile != null;
  }

  public void setImageFileIsSet(boolean value) {
    if (!value) {
      this.imageFile = null;
    }
  }

  public int getFileLength() {
    return this.fileLength;
  }

  public ImageBinary setFileLength(int fileLength) {
    this.fileLength = fileLength;
    setFileLengthIsSet(true);
    return this;
  }

  public void unsetFileLength() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILELENGTH_ISSET_ID);
  }

  /** Returns true if field fileLength is set (has been assigned a value) and false otherwise */
  public boolean isSetFileLength() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILELENGTH_ISSET_ID);
  }

  public void setFileLengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILELENGTH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case IMAGE_FILE:
      if (value == null) {
        unsetImageFile();
      } else {
        if (value instanceof byte[]) {
          setImageFile((byte[])value);
        } else {
          setImageFile((java.nio.ByteBuffer)value);
        }
      }
      break;

    case FILE_LENGTH:
      if (value == null) {
        unsetFileLength();
      } else {
        setFileLength((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IMAGE_FILE:
      return getImageFile();

    case FILE_LENGTH:
      return getFileLength();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IMAGE_FILE:
      return isSetImageFile();
    case FILE_LENGTH:
      return isSetFileLength();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ImageBinary)
      return this.equals((ImageBinary)that);
    return false;
  }

  public boolean equals(ImageBinary that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_imageFile = true && this.isSetImageFile();
    boolean that_present_imageFile = true && that.isSetImageFile();
    if (this_present_imageFile || that_present_imageFile) {
      if (!(this_present_imageFile && that_present_imageFile))
        return false;
      if (!this.imageFile.equals(that.imageFile))
        return false;
    }

    boolean this_present_fileLength = true;
    boolean that_present_fileLength = true;
    if (this_present_fileLength || that_present_fileLength) {
      if (!(this_present_fileLength && that_present_fileLength))
        return false;
      if (this.fileLength != that.fileLength)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetImageFile()) ? 131071 : 524287);
    if (isSetImageFile())
      hashCode = hashCode * 8191 + imageFile.hashCode();

    hashCode = hashCode * 8191 + fileLength;

    return hashCode;
  }

  @Override
  public int compareTo(ImageBinary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetImageFile()).compareTo(other.isSetImageFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageFile, other.imageFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFileLength()).compareTo(other.isSetFileLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileLength, other.fileLength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ImageBinary(");
    boolean first = true;

    sb.append("imageFile:");
    if (this.imageFile == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.imageFile, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileLength:");
    sb.append(this.fileLength);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (imageFile == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'imageFile' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'fileLength' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImageBinaryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageBinaryStandardScheme getScheme() {
      return new ImageBinaryStandardScheme();
    }
  }

  private static class ImageBinaryStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImageBinary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImageBinary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IMAGE_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageFile = iprot.readBinary();
              struct.setImageFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileLength = iprot.readI32();
              struct.setFileLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFileLength()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileLength' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImageBinary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.imageFile != null) {
        oprot.writeFieldBegin(IMAGE_FILE_FIELD_DESC);
        oprot.writeBinary(struct.imageFile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.fileLength);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImageBinaryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageBinaryTupleScheme getScheme() {
      return new ImageBinaryTupleScheme();
    }
  }

  private static class ImageBinaryTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImageBinary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImageBinary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeBinary(struct.imageFile);
      oprot.writeI32(struct.fileLength);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImageBinary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.imageFile = iprot.readBinary();
      struct.setImageFileIsSet(true);
      struct.fileLength = iprot.readI32();
      struct.setFileLengthIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

