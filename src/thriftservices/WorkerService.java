/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftservices;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2022-02-09")
public class WorkerService {

  public interface Iface {

    public PutBlockResponse putBlock(java.lang.String event_function_id, java.util.List<Argument> parameterArray) throws org.apache.thrift.TException;

    public InvokeFunctionResponse invokeFunction(java.lang.String functionName, Specification specs, Location paramLocation, java.lang.String paramFileName) throws org.apache.thrift.TException;

    public GetBlockResponse getBlock(java.lang.String filename, Location dataLocation) throws org.apache.thrift.TException;

    public WriteResultResponse writeResultsToMaster(java.util.List<Argument> resultSet, java.lang.String functionName, java.lang.String eventID) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void putBlock(java.lang.String event_function_id, java.util.List<Argument> parameterArray, org.apache.thrift.async.AsyncMethodCallback<PutBlockResponse> resultHandler) throws org.apache.thrift.TException;

    public void invokeFunction(java.lang.String functionName, Specification specs, Location paramLocation, java.lang.String paramFileName, org.apache.thrift.async.AsyncMethodCallback<InvokeFunctionResponse> resultHandler) throws org.apache.thrift.TException;

    public void getBlock(java.lang.String filename, Location dataLocation, org.apache.thrift.async.AsyncMethodCallback<GetBlockResponse> resultHandler) throws org.apache.thrift.TException;

    public void writeResultsToMaster(java.util.List<Argument> resultSet, java.lang.String functionName, java.lang.String eventID, org.apache.thrift.async.AsyncMethodCallback<WriteResultResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public PutBlockResponse putBlock(java.lang.String event_function_id, java.util.List<Argument> parameterArray) throws org.apache.thrift.TException
    {
      send_putBlock(event_function_id, parameterArray);
      return recv_putBlock();
    }

    public void send_putBlock(java.lang.String event_function_id, java.util.List<Argument> parameterArray) throws org.apache.thrift.TException
    {
      putBlock_args args = new putBlock_args();
      args.setEvent_function_id(event_function_id);
      args.setParameterArray(parameterArray);
      sendBase("putBlock", args);
    }

    public PutBlockResponse recv_putBlock() throws org.apache.thrift.TException
    {
      putBlock_result result = new putBlock_result();
      receiveBase(result, "putBlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "putBlock failed: unknown result");
    }

    public InvokeFunctionResponse invokeFunction(java.lang.String functionName, Specification specs, Location paramLocation, java.lang.String paramFileName) throws org.apache.thrift.TException
    {
      send_invokeFunction(functionName, specs, paramLocation, paramFileName);
      return recv_invokeFunction();
    }

    public void send_invokeFunction(java.lang.String functionName, Specification specs, Location paramLocation, java.lang.String paramFileName) throws org.apache.thrift.TException
    {
      invokeFunction_args args = new invokeFunction_args();
      args.setFunctionName(functionName);
      args.setSpecs(specs);
      args.setParamLocation(paramLocation);
      args.setParamFileName(paramFileName);
      sendBase("invokeFunction", args);
    }

    public InvokeFunctionResponse recv_invokeFunction() throws org.apache.thrift.TException
    {
      invokeFunction_result result = new invokeFunction_result();
      receiveBase(result, "invokeFunction");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "invokeFunction failed: unknown result");
    }

    public GetBlockResponse getBlock(java.lang.String filename, Location dataLocation) throws org.apache.thrift.TException
    {
      send_getBlock(filename, dataLocation);
      return recv_getBlock();
    }

    public void send_getBlock(java.lang.String filename, Location dataLocation) throws org.apache.thrift.TException
    {
      getBlock_args args = new getBlock_args();
      args.setFilename(filename);
      args.setDataLocation(dataLocation);
      sendBase("getBlock", args);
    }

    public GetBlockResponse recv_getBlock() throws org.apache.thrift.TException
    {
      getBlock_result result = new getBlock_result();
      receiveBase(result, "getBlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBlock failed: unknown result");
    }

    public WriteResultResponse writeResultsToMaster(java.util.List<Argument> resultSet, java.lang.String functionName, java.lang.String eventID) throws org.apache.thrift.TException
    {
      send_writeResultsToMaster(resultSet, functionName, eventID);
      return recv_writeResultsToMaster();
    }

    public void send_writeResultsToMaster(java.util.List<Argument> resultSet, java.lang.String functionName, java.lang.String eventID) throws org.apache.thrift.TException
    {
      writeResultsToMaster_args args = new writeResultsToMaster_args();
      args.setResultSet(resultSet);
      args.setFunctionName(functionName);
      args.setEventID(eventID);
      sendBase("writeResultsToMaster", args);
    }

    public WriteResultResponse recv_writeResultsToMaster() throws org.apache.thrift.TException
    {
      writeResultsToMaster_result result = new writeResultsToMaster_result();
      receiveBase(result, "writeResultsToMaster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeResultsToMaster failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void putBlock(java.lang.String event_function_id, java.util.List<Argument> parameterArray, org.apache.thrift.async.AsyncMethodCallback<PutBlockResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      putBlock_call method_call = new putBlock_call(event_function_id, parameterArray, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class putBlock_call extends org.apache.thrift.async.TAsyncMethodCall<PutBlockResponse> {
      private java.lang.String event_function_id;
      private java.util.List<Argument> parameterArray;
      public putBlock_call(java.lang.String event_function_id, java.util.List<Argument> parameterArray, org.apache.thrift.async.AsyncMethodCallback<PutBlockResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.event_function_id = event_function_id;
        this.parameterArray = parameterArray;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("putBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        putBlock_args args = new putBlock_args();
        args.setEvent_function_id(event_function_id);
        args.setParameterArray(parameterArray);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PutBlockResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_putBlock();
      }
    }

    public void invokeFunction(java.lang.String functionName, Specification specs, Location paramLocation, java.lang.String paramFileName, org.apache.thrift.async.AsyncMethodCallback<InvokeFunctionResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      invokeFunction_call method_call = new invokeFunction_call(functionName, specs, paramLocation, paramFileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class invokeFunction_call extends org.apache.thrift.async.TAsyncMethodCall<InvokeFunctionResponse> {
      private java.lang.String functionName;
      private Specification specs;
      private Location paramLocation;
      private java.lang.String paramFileName;
      public invokeFunction_call(java.lang.String functionName, Specification specs, Location paramLocation, java.lang.String paramFileName, org.apache.thrift.async.AsyncMethodCallback<InvokeFunctionResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.functionName = functionName;
        this.specs = specs;
        this.paramLocation = paramLocation;
        this.paramFileName = paramFileName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("invokeFunction", org.apache.thrift.protocol.TMessageType.CALL, 0));
        invokeFunction_args args = new invokeFunction_args();
        args.setFunctionName(functionName);
        args.setSpecs(specs);
        args.setParamLocation(paramLocation);
        args.setParamFileName(paramFileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InvokeFunctionResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_invokeFunction();
      }
    }

    public void getBlock(java.lang.String filename, Location dataLocation, org.apache.thrift.async.AsyncMethodCallback<GetBlockResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBlock_call method_call = new getBlock_call(filename, dataLocation, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBlock_call extends org.apache.thrift.async.TAsyncMethodCall<GetBlockResponse> {
      private java.lang.String filename;
      private Location dataLocation;
      public getBlock_call(java.lang.String filename, Location dataLocation, org.apache.thrift.async.AsyncMethodCallback<GetBlockResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filename = filename;
        this.dataLocation = dataLocation;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBlock_args args = new getBlock_args();
        args.setFilename(filename);
        args.setDataLocation(dataLocation);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetBlockResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBlock();
      }
    }

    public void writeResultsToMaster(java.util.List<Argument> resultSet, java.lang.String functionName, java.lang.String eventID, org.apache.thrift.async.AsyncMethodCallback<WriteResultResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeResultsToMaster_call method_call = new writeResultsToMaster_call(resultSet, functionName, eventID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeResultsToMaster_call extends org.apache.thrift.async.TAsyncMethodCall<WriteResultResponse> {
      private java.util.List<Argument> resultSet;
      private java.lang.String functionName;
      private java.lang.String eventID;
      public writeResultsToMaster_call(java.util.List<Argument> resultSet, java.lang.String functionName, java.lang.String eventID, org.apache.thrift.async.AsyncMethodCallback<WriteResultResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.resultSet = resultSet;
        this.functionName = functionName;
        this.eventID = eventID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeResultsToMaster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeResultsToMaster_args args = new writeResultsToMaster_args();
        args.setResultSet(resultSet);
        args.setFunctionName(functionName);
        args.setEventID(eventID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WriteResultResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeResultsToMaster();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("putBlock", new putBlock());
      processMap.put("invokeFunction", new invokeFunction());
      processMap.put("getBlock", new getBlock());
      processMap.put("writeResultsToMaster", new writeResultsToMaster());
      return processMap;
    }

    public static class putBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, putBlock_args> {
      public putBlock() {
        super("putBlock");
      }

      public putBlock_args getEmptyArgsInstance() {
        return new putBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public putBlock_result getResult(I iface, putBlock_args args) throws org.apache.thrift.TException {
        putBlock_result result = new putBlock_result();
        result.success = iface.putBlock(args.event_function_id, args.parameterArray);
        return result;
      }
    }

    public static class invokeFunction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, invokeFunction_args> {
      public invokeFunction() {
        super("invokeFunction");
      }

      public invokeFunction_args getEmptyArgsInstance() {
        return new invokeFunction_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public invokeFunction_result getResult(I iface, invokeFunction_args args) throws org.apache.thrift.TException {
        invokeFunction_result result = new invokeFunction_result();
        result.success = iface.invokeFunction(args.functionName, args.specs, args.paramLocation, args.paramFileName);
        return result;
      }
    }

    public static class getBlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBlock_args> {
      public getBlock() {
        super("getBlock");
      }

      public getBlock_args getEmptyArgsInstance() {
        return new getBlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getBlock_result getResult(I iface, getBlock_args args) throws org.apache.thrift.TException {
        getBlock_result result = new getBlock_result();
        result.success = iface.getBlock(args.filename, args.dataLocation);
        return result;
      }
    }

    public static class writeResultsToMaster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeResultsToMaster_args> {
      public writeResultsToMaster() {
        super("writeResultsToMaster");
      }

      public writeResultsToMaster_args getEmptyArgsInstance() {
        return new writeResultsToMaster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public writeResultsToMaster_result getResult(I iface, writeResultsToMaster_args args) throws org.apache.thrift.TException {
        writeResultsToMaster_result result = new writeResultsToMaster_result();
        result.success = iface.writeResultsToMaster(args.resultSet, args.functionName, args.eventID);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("putBlock", new putBlock());
      processMap.put("invokeFunction", new invokeFunction());
      processMap.put("getBlock", new getBlock());
      processMap.put("writeResultsToMaster", new writeResultsToMaster());
      return processMap;
    }

    public static class putBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, putBlock_args, PutBlockResponse> {
      public putBlock() {
        super("putBlock");
      }

      public putBlock_args getEmptyArgsInstance() {
        return new putBlock_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<PutBlockResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<PutBlockResponse>() { 
          public void onComplete(PutBlockResponse o) {
            putBlock_result result = new putBlock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            putBlock_result result = new putBlock_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, putBlock_args args, org.apache.thrift.async.AsyncMethodCallback<PutBlockResponse> resultHandler) throws org.apache.thrift.TException {
        iface.putBlock(args.event_function_id, args.parameterArray,resultHandler);
      }
    }

    public static class invokeFunction<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, invokeFunction_args, InvokeFunctionResponse> {
      public invokeFunction() {
        super("invokeFunction");
      }

      public invokeFunction_args getEmptyArgsInstance() {
        return new invokeFunction_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<InvokeFunctionResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<InvokeFunctionResponse>() { 
          public void onComplete(InvokeFunctionResponse o) {
            invokeFunction_result result = new invokeFunction_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            invokeFunction_result result = new invokeFunction_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, invokeFunction_args args, org.apache.thrift.async.AsyncMethodCallback<InvokeFunctionResponse> resultHandler) throws org.apache.thrift.TException {
        iface.invokeFunction(args.functionName, args.specs, args.paramLocation, args.paramFileName,resultHandler);
      }
    }

    public static class getBlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBlock_args, GetBlockResponse> {
      public getBlock() {
        super("getBlock");
      }

      public getBlock_args getEmptyArgsInstance() {
        return new getBlock_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<GetBlockResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<GetBlockResponse>() { 
          public void onComplete(GetBlockResponse o) {
            getBlock_result result = new getBlock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getBlock_result result = new getBlock_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBlock_args args, org.apache.thrift.async.AsyncMethodCallback<GetBlockResponse> resultHandler) throws org.apache.thrift.TException {
        iface.getBlock(args.filename, args.dataLocation,resultHandler);
      }
    }

    public static class writeResultsToMaster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeResultsToMaster_args, WriteResultResponse> {
      public writeResultsToMaster() {
        super("writeResultsToMaster");
      }

      public writeResultsToMaster_args getEmptyArgsInstance() {
        return new writeResultsToMaster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<WriteResultResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<WriteResultResponse>() { 
          public void onComplete(WriteResultResponse o) {
            writeResultsToMaster_result result = new writeResultsToMaster_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            writeResultsToMaster_result result = new writeResultsToMaster_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeResultsToMaster_args args, org.apache.thrift.async.AsyncMethodCallback<WriteResultResponse> resultHandler) throws org.apache.thrift.TException {
        iface.writeResultsToMaster(args.resultSet, args.functionName, args.eventID,resultHandler);
      }
    }

  }

  public static class putBlock_args implements org.apache.thrift.TBase<putBlock_args, putBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<putBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putBlock_args");

    private static final org.apache.thrift.protocol.TField EVENT_FUNCTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("event_function_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMETER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterArray", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putBlock_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putBlock_argsTupleSchemeFactory();

    public java.lang.String event_function_id; // required
    public java.util.List<Argument> parameterArray; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_FUNCTION_ID((short)1, "event_function_id"),
      PARAMETER_ARRAY((short)2, "parameterArray");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_FUNCTION_ID
            return EVENT_FUNCTION_ID;
          case 2: // PARAMETER_ARRAY
            return PARAMETER_ARRAY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_FUNCTION_ID, new org.apache.thrift.meta_data.FieldMetaData("event_function_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMETER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("parameterArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Argument.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putBlock_args.class, metaDataMap);
    }

    public putBlock_args() {
    }

    public putBlock_args(
      java.lang.String event_function_id,
      java.util.List<Argument> parameterArray)
    {
      this();
      this.event_function_id = event_function_id;
      this.parameterArray = parameterArray;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putBlock_args(putBlock_args other) {
      if (other.isSetEvent_function_id()) {
        this.event_function_id = other.event_function_id;
      }
      if (other.isSetParameterArray()) {
        java.util.List<Argument> __this__parameterArray = new java.util.ArrayList<Argument>(other.parameterArray.size());
        for (Argument other_element : other.parameterArray) {
          __this__parameterArray.add(new Argument(other_element));
        }
        this.parameterArray = __this__parameterArray;
      }
    }

    public putBlock_args deepCopy() {
      return new putBlock_args(this);
    }

    @Override
    public void clear() {
      this.event_function_id = null;
      this.parameterArray = null;
    }

    public java.lang.String getEvent_function_id() {
      return this.event_function_id;
    }

    public putBlock_args setEvent_function_id(java.lang.String event_function_id) {
      this.event_function_id = event_function_id;
      return this;
    }

    public void unsetEvent_function_id() {
      this.event_function_id = null;
    }

    /** Returns true if field event_function_id is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent_function_id() {
      return this.event_function_id != null;
    }

    public void setEvent_function_idIsSet(boolean value) {
      if (!value) {
        this.event_function_id = null;
      }
    }

    public int getParameterArraySize() {
      return (this.parameterArray == null) ? 0 : this.parameterArray.size();
    }

    public java.util.Iterator<Argument> getParameterArrayIterator() {
      return (this.parameterArray == null) ? null : this.parameterArray.iterator();
    }

    public void addToParameterArray(Argument elem) {
      if (this.parameterArray == null) {
        this.parameterArray = new java.util.ArrayList<Argument>();
      }
      this.parameterArray.add(elem);
    }

    public java.util.List<Argument> getParameterArray() {
      return this.parameterArray;
    }

    public putBlock_args setParameterArray(java.util.List<Argument> parameterArray) {
      this.parameterArray = parameterArray;
      return this;
    }

    public void unsetParameterArray() {
      this.parameterArray = null;
    }

    /** Returns true if field parameterArray is set (has been assigned a value) and false otherwise */
    public boolean isSetParameterArray() {
      return this.parameterArray != null;
    }

    public void setParameterArrayIsSet(boolean value) {
      if (!value) {
        this.parameterArray = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EVENT_FUNCTION_ID:
        if (value == null) {
          unsetEvent_function_id();
        } else {
          setEvent_function_id((java.lang.String)value);
        }
        break;

      case PARAMETER_ARRAY:
        if (value == null) {
          unsetParameterArray();
        } else {
          setParameterArray((java.util.List<Argument>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_FUNCTION_ID:
        return getEvent_function_id();

      case PARAMETER_ARRAY:
        return getParameterArray();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EVENT_FUNCTION_ID:
        return isSetEvent_function_id();
      case PARAMETER_ARRAY:
        return isSetParameterArray();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof putBlock_args)
        return this.equals((putBlock_args)that);
      return false;
    }

    public boolean equals(putBlock_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_event_function_id = true && this.isSetEvent_function_id();
      boolean that_present_event_function_id = true && that.isSetEvent_function_id();
      if (this_present_event_function_id || that_present_event_function_id) {
        if (!(this_present_event_function_id && that_present_event_function_id))
          return false;
        if (!this.event_function_id.equals(that.event_function_id))
          return false;
      }

      boolean this_present_parameterArray = true && this.isSetParameterArray();
      boolean that_present_parameterArray = true && that.isSetParameterArray();
      if (this_present_parameterArray || that_present_parameterArray) {
        if (!(this_present_parameterArray && that_present_parameterArray))
          return false;
        if (!this.parameterArray.equals(that.parameterArray))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEvent_function_id()) ? 131071 : 524287);
      if (isSetEvent_function_id())
        hashCode = hashCode * 8191 + event_function_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetParameterArray()) ? 131071 : 524287);
      if (isSetParameterArray())
        hashCode = hashCode * 8191 + parameterArray.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(putBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEvent_function_id()).compareTo(other.isSetEvent_function_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent_function_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_function_id, other.event_function_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParameterArray()).compareTo(other.isSetParameterArray());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameterArray()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterArray, other.parameterArray);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("putBlock_args(");
      boolean first = true;

      sb.append("event_function_id:");
      if (this.event_function_id == null) {
        sb.append("null");
      } else {
        sb.append(this.event_function_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameterArray:");
      if (this.parameterArray == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterArray);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putBlock_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putBlock_argsStandardScheme getScheme() {
        return new putBlock_argsStandardScheme();
      }
    }

    private static class putBlock_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<putBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_FUNCTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.event_function_id = iprot.readString();
                struct.setEvent_function_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMETER_ARRAY
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.parameterArray = new java.util.ArrayList<Argument>(_list8.size);
                  Argument _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new Argument();
                    _elem9.read(iprot);
                    struct.parameterArray.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setParameterArrayIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.event_function_id != null) {
          oprot.writeFieldBegin(EVENT_FUNCTION_ID_FIELD_DESC);
          oprot.writeString(struct.event_function_id);
          oprot.writeFieldEnd();
        }
        if (struct.parameterArray != null) {
          oprot.writeFieldBegin(PARAMETER_ARRAY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.parameterArray.size()));
            for (Argument _iter11 : struct.parameterArray)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putBlock_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putBlock_argsTupleScheme getScheme() {
        return new putBlock_argsTupleScheme();
      }
    }

    private static class putBlock_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<putBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEvent_function_id()) {
          optionals.set(0);
        }
        if (struct.isSetParameterArray()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEvent_function_id()) {
          oprot.writeString(struct.event_function_id);
        }
        if (struct.isSetParameterArray()) {
          {
            oprot.writeI32(struct.parameterArray.size());
            for (Argument _iter12 : struct.parameterArray)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.event_function_id = iprot.readString();
          struct.setEvent_function_idIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.parameterArray = new java.util.ArrayList<Argument>(_list13.size);
            Argument _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new Argument();
              _elem14.read(iprot);
              struct.parameterArray.add(_elem14);
            }
          }
          struct.setParameterArrayIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class putBlock_result implements org.apache.thrift.TBase<putBlock_result, putBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<putBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("putBlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new putBlock_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new putBlock_resultTupleSchemeFactory();

    public PutBlockResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PutBlockResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(putBlock_result.class, metaDataMap);
    }

    public putBlock_result() {
    }

    public putBlock_result(
      PutBlockResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public putBlock_result(putBlock_result other) {
      if (other.isSetSuccess()) {
        this.success = new PutBlockResponse(other.success);
      }
    }

    public putBlock_result deepCopy() {
      return new putBlock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PutBlockResponse getSuccess() {
      return this.success;
    }

    public putBlock_result setSuccess(PutBlockResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PutBlockResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof putBlock_result)
        return this.equals((putBlock_result)that);
      return false;
    }

    public boolean equals(putBlock_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(putBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("putBlock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class putBlock_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putBlock_resultStandardScheme getScheme() {
        return new putBlock_resultStandardScheme();
      }
    }

    private static class putBlock_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<putBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, putBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PutBlockResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, putBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class putBlock_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public putBlock_resultTupleScheme getScheme() {
        return new putBlock_resultTupleScheme();
      }
    }

    private static class putBlock_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<putBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, putBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, putBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PutBlockResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class invokeFunction_args implements org.apache.thrift.TBase<invokeFunction_args, invokeFunction_args._Fields>, java.io.Serializable, Cloneable, Comparable<invokeFunction_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invokeFunction_args");

    private static final org.apache.thrift.protocol.TField FUNCTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("functionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SPECS_FIELD_DESC = new org.apache.thrift.protocol.TField("specs", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PARAM_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("paramLocation", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PARAM_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("paramFileName", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new invokeFunction_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new invokeFunction_argsTupleSchemeFactory();

    public java.lang.String functionName; // required
    public Specification specs; // required
    public Location paramLocation; // required
    public java.lang.String paramFileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUNCTION_NAME((short)1, "functionName"),
      SPECS((short)2, "specs"),
      PARAM_LOCATION((short)3, "paramLocation"),
      PARAM_FILE_NAME((short)4, "paramFileName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUNCTION_NAME
            return FUNCTION_NAME;
          case 2: // SPECS
            return SPECS;
          case 3: // PARAM_LOCATION
            return PARAM_LOCATION;
          case 4: // PARAM_FILE_NAME
            return PARAM_FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUNCTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("functionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPECS, new org.apache.thrift.meta_data.FieldMetaData("specs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Specification.class)));
      tmpMap.put(_Fields.PARAM_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("paramLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
      tmpMap.put(_Fields.PARAM_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("paramFileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invokeFunction_args.class, metaDataMap);
    }

    public invokeFunction_args() {
    }

    public invokeFunction_args(
      java.lang.String functionName,
      Specification specs,
      Location paramLocation,
      java.lang.String paramFileName)
    {
      this();
      this.functionName = functionName;
      this.specs = specs;
      this.paramLocation = paramLocation;
      this.paramFileName = paramFileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invokeFunction_args(invokeFunction_args other) {
      if (other.isSetFunctionName()) {
        this.functionName = other.functionName;
      }
      if (other.isSetSpecs()) {
        this.specs = new Specification(other.specs);
      }
      if (other.isSetParamLocation()) {
        this.paramLocation = new Location(other.paramLocation);
      }
      if (other.isSetParamFileName()) {
        this.paramFileName = other.paramFileName;
      }
    }

    public invokeFunction_args deepCopy() {
      return new invokeFunction_args(this);
    }

    @Override
    public void clear() {
      this.functionName = null;
      this.specs = null;
      this.paramLocation = null;
      this.paramFileName = null;
    }

    public java.lang.String getFunctionName() {
      return this.functionName;
    }

    public invokeFunction_args setFunctionName(java.lang.String functionName) {
      this.functionName = functionName;
      return this;
    }

    public void unsetFunctionName() {
      this.functionName = null;
    }

    /** Returns true if field functionName is set (has been assigned a value) and false otherwise */
    public boolean isSetFunctionName() {
      return this.functionName != null;
    }

    public void setFunctionNameIsSet(boolean value) {
      if (!value) {
        this.functionName = null;
      }
    }

    public Specification getSpecs() {
      return this.specs;
    }

    public invokeFunction_args setSpecs(Specification specs) {
      this.specs = specs;
      return this;
    }

    public void unsetSpecs() {
      this.specs = null;
    }

    /** Returns true if field specs is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecs() {
      return this.specs != null;
    }

    public void setSpecsIsSet(boolean value) {
      if (!value) {
        this.specs = null;
      }
    }

    public Location getParamLocation() {
      return this.paramLocation;
    }

    public invokeFunction_args setParamLocation(Location paramLocation) {
      this.paramLocation = paramLocation;
      return this;
    }

    public void unsetParamLocation() {
      this.paramLocation = null;
    }

    /** Returns true if field paramLocation is set (has been assigned a value) and false otherwise */
    public boolean isSetParamLocation() {
      return this.paramLocation != null;
    }

    public void setParamLocationIsSet(boolean value) {
      if (!value) {
        this.paramLocation = null;
      }
    }

    public java.lang.String getParamFileName() {
      return this.paramFileName;
    }

    public invokeFunction_args setParamFileName(java.lang.String paramFileName) {
      this.paramFileName = paramFileName;
      return this;
    }

    public void unsetParamFileName() {
      this.paramFileName = null;
    }

    /** Returns true if field paramFileName is set (has been assigned a value) and false otherwise */
    public boolean isSetParamFileName() {
      return this.paramFileName != null;
    }

    public void setParamFileNameIsSet(boolean value) {
      if (!value) {
        this.paramFileName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FUNCTION_NAME:
        if (value == null) {
          unsetFunctionName();
        } else {
          setFunctionName((java.lang.String)value);
        }
        break;

      case SPECS:
        if (value == null) {
          unsetSpecs();
        } else {
          setSpecs((Specification)value);
        }
        break;

      case PARAM_LOCATION:
        if (value == null) {
          unsetParamLocation();
        } else {
          setParamLocation((Location)value);
        }
        break;

      case PARAM_FILE_NAME:
        if (value == null) {
          unsetParamFileName();
        } else {
          setParamFileName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FUNCTION_NAME:
        return getFunctionName();

      case SPECS:
        return getSpecs();

      case PARAM_LOCATION:
        return getParamLocation();

      case PARAM_FILE_NAME:
        return getParamFileName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FUNCTION_NAME:
        return isSetFunctionName();
      case SPECS:
        return isSetSpecs();
      case PARAM_LOCATION:
        return isSetParamLocation();
      case PARAM_FILE_NAME:
        return isSetParamFileName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof invokeFunction_args)
        return this.equals((invokeFunction_args)that);
      return false;
    }

    public boolean equals(invokeFunction_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_functionName = true && this.isSetFunctionName();
      boolean that_present_functionName = true && that.isSetFunctionName();
      if (this_present_functionName || that_present_functionName) {
        if (!(this_present_functionName && that_present_functionName))
          return false;
        if (!this.functionName.equals(that.functionName))
          return false;
      }

      boolean this_present_specs = true && this.isSetSpecs();
      boolean that_present_specs = true && that.isSetSpecs();
      if (this_present_specs || that_present_specs) {
        if (!(this_present_specs && that_present_specs))
          return false;
        if (!this.specs.equals(that.specs))
          return false;
      }

      boolean this_present_paramLocation = true && this.isSetParamLocation();
      boolean that_present_paramLocation = true && that.isSetParamLocation();
      if (this_present_paramLocation || that_present_paramLocation) {
        if (!(this_present_paramLocation && that_present_paramLocation))
          return false;
        if (!this.paramLocation.equals(that.paramLocation))
          return false;
      }

      boolean this_present_paramFileName = true && this.isSetParamFileName();
      boolean that_present_paramFileName = true && that.isSetParamFileName();
      if (this_present_paramFileName || that_present_paramFileName) {
        if (!(this_present_paramFileName && that_present_paramFileName))
          return false;
        if (!this.paramFileName.equals(that.paramFileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFunctionName()) ? 131071 : 524287);
      if (isSetFunctionName())
        hashCode = hashCode * 8191 + functionName.hashCode();

      hashCode = hashCode * 8191 + ((isSetSpecs()) ? 131071 : 524287);
      if (isSetSpecs())
        hashCode = hashCode * 8191 + specs.hashCode();

      hashCode = hashCode * 8191 + ((isSetParamLocation()) ? 131071 : 524287);
      if (isSetParamLocation())
        hashCode = hashCode * 8191 + paramLocation.hashCode();

      hashCode = hashCode * 8191 + ((isSetParamFileName()) ? 131071 : 524287);
      if (isSetParamFileName())
        hashCode = hashCode * 8191 + paramFileName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(invokeFunction_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFunctionName()).compareTo(other.isSetFunctionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFunctionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functionName, other.functionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSpecs()).compareTo(other.isSetSpecs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specs, other.specs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParamLocation()).compareTo(other.isSetParamLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramLocation, other.paramLocation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParamFileName()).compareTo(other.isSetParamFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramFileName, other.paramFileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("invokeFunction_args(");
      boolean first = true;

      sb.append("functionName:");
      if (this.functionName == null) {
        sb.append("null");
      } else {
        sb.append(this.functionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("specs:");
      if (this.specs == null) {
        sb.append("null");
      } else {
        sb.append(this.specs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramLocation:");
      if (this.paramLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.paramLocation);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramFileName:");
      if (this.paramFileName == null) {
        sb.append("null");
      } else {
        sb.append(this.paramFileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (specs != null) {
        specs.validate();
      }
      if (paramLocation != null) {
        paramLocation.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class invokeFunction_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invokeFunction_argsStandardScheme getScheme() {
        return new invokeFunction_argsStandardScheme();
      }
    }

    private static class invokeFunction_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<invokeFunction_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invokeFunction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUNCTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.functionName = iprot.readString();
                struct.setFunctionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SPECS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.specs = new Specification();
                struct.specs.read(iprot);
                struct.setSpecsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAM_LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.paramLocation = new Location();
                struct.paramLocation.read(iprot);
                struct.setParamLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARAM_FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paramFileName = iprot.readString();
                struct.setParamFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invokeFunction_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.functionName != null) {
          oprot.writeFieldBegin(FUNCTION_NAME_FIELD_DESC);
          oprot.writeString(struct.functionName);
          oprot.writeFieldEnd();
        }
        if (struct.specs != null) {
          oprot.writeFieldBegin(SPECS_FIELD_DESC);
          struct.specs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.paramLocation != null) {
          oprot.writeFieldBegin(PARAM_LOCATION_FIELD_DESC);
          struct.paramLocation.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.paramFileName != null) {
          oprot.writeFieldBegin(PARAM_FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.paramFileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invokeFunction_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invokeFunction_argsTupleScheme getScheme() {
        return new invokeFunction_argsTupleScheme();
      }
    }

    private static class invokeFunction_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<invokeFunction_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, invokeFunction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFunctionName()) {
          optionals.set(0);
        }
        if (struct.isSetSpecs()) {
          optionals.set(1);
        }
        if (struct.isSetParamLocation()) {
          optionals.set(2);
        }
        if (struct.isSetParamFileName()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFunctionName()) {
          oprot.writeString(struct.functionName);
        }
        if (struct.isSetSpecs()) {
          struct.specs.write(oprot);
        }
        if (struct.isSetParamLocation()) {
          struct.paramLocation.write(oprot);
        }
        if (struct.isSetParamFileName()) {
          oprot.writeString(struct.paramFileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, invokeFunction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.functionName = iprot.readString();
          struct.setFunctionNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.specs = new Specification();
          struct.specs.read(iprot);
          struct.setSpecsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.paramLocation = new Location();
          struct.paramLocation.read(iprot);
          struct.setParamLocationIsSet(true);
        }
        if (incoming.get(3)) {
          struct.paramFileName = iprot.readString();
          struct.setParamFileNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class invokeFunction_result implements org.apache.thrift.TBase<invokeFunction_result, invokeFunction_result._Fields>, java.io.Serializable, Cloneable, Comparable<invokeFunction_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("invokeFunction_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new invokeFunction_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new invokeFunction_resultTupleSchemeFactory();

    public InvokeFunctionResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvokeFunctionResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(invokeFunction_result.class, metaDataMap);
    }

    public invokeFunction_result() {
    }

    public invokeFunction_result(
      InvokeFunctionResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invokeFunction_result(invokeFunction_result other) {
      if (other.isSetSuccess()) {
        this.success = new InvokeFunctionResponse(other.success);
      }
    }

    public invokeFunction_result deepCopy() {
      return new invokeFunction_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public InvokeFunctionResponse getSuccess() {
      return this.success;
    }

    public invokeFunction_result setSuccess(InvokeFunctionResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((InvokeFunctionResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof invokeFunction_result)
        return this.equals((invokeFunction_result)that);
      return false;
    }

    public boolean equals(invokeFunction_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(invokeFunction_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("invokeFunction_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class invokeFunction_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invokeFunction_resultStandardScheme getScheme() {
        return new invokeFunction_resultStandardScheme();
      }
    }

    private static class invokeFunction_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<invokeFunction_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, invokeFunction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new InvokeFunctionResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, invokeFunction_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class invokeFunction_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public invokeFunction_resultTupleScheme getScheme() {
        return new invokeFunction_resultTupleScheme();
      }
    }

    private static class invokeFunction_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<invokeFunction_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, invokeFunction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, invokeFunction_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new InvokeFunctionResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBlock_args implements org.apache.thrift.TBase<getBlock_args, getBlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBlock_args");

    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("dataLocation", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBlock_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBlock_argsTupleSchemeFactory();

    public java.lang.String filename; // required
    public Location dataLocation; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILENAME((short)1, "filename"),
      DATA_LOCATION((short)2, "dataLocation");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILENAME
            return FILENAME;
          case 2: // DATA_LOCATION
            return DATA_LOCATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("dataLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlock_args.class, metaDataMap);
    }

    public getBlock_args() {
    }

    public getBlock_args(
      java.lang.String filename,
      Location dataLocation)
    {
      this();
      this.filename = filename;
      this.dataLocation = dataLocation;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlock_args(getBlock_args other) {
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
      if (other.isSetDataLocation()) {
        this.dataLocation = new Location(other.dataLocation);
      }
    }

    public getBlock_args deepCopy() {
      return new getBlock_args(this);
    }

    @Override
    public void clear() {
      this.filename = null;
      this.dataLocation = null;
    }

    public java.lang.String getFilename() {
      return this.filename;
    }

    public getBlock_args setFilename(java.lang.String filename) {
      this.filename = filename;
      return this;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    /** Returns true if field filename is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public Location getDataLocation() {
      return this.dataLocation;
    }

    public getBlock_args setDataLocation(Location dataLocation) {
      this.dataLocation = dataLocation;
      return this;
    }

    public void unsetDataLocation() {
      this.dataLocation = null;
    }

    /** Returns true if field dataLocation is set (has been assigned a value) and false otherwise */
    public boolean isSetDataLocation() {
      return this.dataLocation != null;
    }

    public void setDataLocationIsSet(boolean value) {
      if (!value) {
        this.dataLocation = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((java.lang.String)value);
        }
        break;

      case DATA_LOCATION:
        if (value == null) {
          unsetDataLocation();
        } else {
          setDataLocation((Location)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILENAME:
        return getFilename();

      case DATA_LOCATION:
        return getDataLocation();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILENAME:
        return isSetFilename();
      case DATA_LOCATION:
        return isSetDataLocation();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlock_args)
        return this.equals((getBlock_args)that);
      return false;
    }

    public boolean equals(getBlock_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      boolean this_present_dataLocation = true && this.isSetDataLocation();
      boolean that_present_dataLocation = true && that.isSetDataLocation();
      if (this_present_dataLocation || that_present_dataLocation) {
        if (!(this_present_dataLocation && that_present_dataLocation))
          return false;
        if (!this.dataLocation.equals(that.dataLocation))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFilename()) ? 131071 : 524287);
      if (isSetFilename())
        hashCode = hashCode * 8191 + filename.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataLocation()) ? 131071 : 524287);
      if (isSetDataLocation())
        hashCode = hashCode * 8191 + dataLocation.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataLocation()).compareTo(other.isSetDataLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataLocation, other.dataLocation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBlock_args(");
      boolean first = true;

      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataLocation:");
      if (this.dataLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.dataLocation);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dataLocation != null) {
        dataLocation.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBlock_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBlock_argsStandardScheme getScheme() {
        return new getBlock_argsStandardScheme();
      }
    }

    private static class getBlock_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename = iprot.readString();
                struct.setFilenameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dataLocation = new Location();
                struct.dataLocation.read(iprot);
                struct.setDataLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filename != null) {
          oprot.writeFieldBegin(FILENAME_FIELD_DESC);
          oprot.writeString(struct.filename);
          oprot.writeFieldEnd();
        }
        if (struct.dataLocation != null) {
          oprot.writeFieldBegin(DATA_LOCATION_FIELD_DESC);
          struct.dataLocation.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBlock_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBlock_argsTupleScheme getScheme() {
        return new getBlock_argsTupleScheme();
      }
    }

    private static class getBlock_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFilename()) {
          optionals.set(0);
        }
        if (struct.isSetDataLocation()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFilename()) {
          oprot.writeString(struct.filename);
        }
        if (struct.isSetDataLocation()) {
          struct.dataLocation.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.filename = iprot.readString();
          struct.setFilenameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataLocation = new Location();
          struct.dataLocation.read(iprot);
          struct.setDataLocationIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBlock_result implements org.apache.thrift.TBase<getBlock_result, getBlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBlock_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBlock_resultTupleSchemeFactory();

    public GetBlockResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetBlockResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBlock_result.class, metaDataMap);
    }

    public getBlock_result() {
    }

    public getBlock_result(
      GetBlockResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlock_result(getBlock_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetBlockResponse(other.success);
      }
    }

    public getBlock_result deepCopy() {
      return new getBlock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetBlockResponse getSuccess() {
      return this.success;
    }

    public getBlock_result setSuccess(GetBlockResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetBlockResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlock_result)
        return this.equals((getBlock_result)that);
      return false;
    }

    public boolean equals(getBlock_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBlock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBlock_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBlock_resultStandardScheme getScheme() {
        return new getBlock_resultStandardScheme();
      }
    }

    private static class getBlock_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetBlockResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBlock_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBlock_resultTupleScheme getScheme() {
        return new getBlock_resultTupleScheme();
      }
    }

    private static class getBlock_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetBlockResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeResultsToMaster_args implements org.apache.thrift.TBase<writeResultsToMaster_args, writeResultsToMaster_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeResultsToMaster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeResultsToMaster_args");

    private static final org.apache.thrift.protocol.TField RESULT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("resultSet", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField FUNCTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("functionName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventID", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeResultsToMaster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeResultsToMaster_argsTupleSchemeFactory();

    public java.util.List<Argument> resultSet; // required
    public java.lang.String functionName; // required
    public java.lang.String eventID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESULT_SET((short)1, "resultSet"),
      FUNCTION_NAME((short)2, "functionName"),
      EVENT_ID((short)3, "eventID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESULT_SET
            return RESULT_SET;
          case 2: // FUNCTION_NAME
            return FUNCTION_NAME;
          case 3: // EVENT_ID
            return EVENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESULT_SET, new org.apache.thrift.meta_data.FieldMetaData("resultSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Argument.class))));
      tmpMap.put(_Fields.FUNCTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("functionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeResultsToMaster_args.class, metaDataMap);
    }

    public writeResultsToMaster_args() {
    }

    public writeResultsToMaster_args(
      java.util.List<Argument> resultSet,
      java.lang.String functionName,
      java.lang.String eventID)
    {
      this();
      this.resultSet = resultSet;
      this.functionName = functionName;
      this.eventID = eventID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeResultsToMaster_args(writeResultsToMaster_args other) {
      if (other.isSetResultSet()) {
        java.util.List<Argument> __this__resultSet = new java.util.ArrayList<Argument>(other.resultSet.size());
        for (Argument other_element : other.resultSet) {
          __this__resultSet.add(new Argument(other_element));
        }
        this.resultSet = __this__resultSet;
      }
      if (other.isSetFunctionName()) {
        this.functionName = other.functionName;
      }
      if (other.isSetEventID()) {
        this.eventID = other.eventID;
      }
    }

    public writeResultsToMaster_args deepCopy() {
      return new writeResultsToMaster_args(this);
    }

    @Override
    public void clear() {
      this.resultSet = null;
      this.functionName = null;
      this.eventID = null;
    }

    public int getResultSetSize() {
      return (this.resultSet == null) ? 0 : this.resultSet.size();
    }

    public java.util.Iterator<Argument> getResultSetIterator() {
      return (this.resultSet == null) ? null : this.resultSet.iterator();
    }

    public void addToResultSet(Argument elem) {
      if (this.resultSet == null) {
        this.resultSet = new java.util.ArrayList<Argument>();
      }
      this.resultSet.add(elem);
    }

    public java.util.List<Argument> getResultSet() {
      return this.resultSet;
    }

    public writeResultsToMaster_args setResultSet(java.util.List<Argument> resultSet) {
      this.resultSet = resultSet;
      return this;
    }

    public void unsetResultSet() {
      this.resultSet = null;
    }

    /** Returns true if field resultSet is set (has been assigned a value) and false otherwise */
    public boolean isSetResultSet() {
      return this.resultSet != null;
    }

    public void setResultSetIsSet(boolean value) {
      if (!value) {
        this.resultSet = null;
      }
    }

    public java.lang.String getFunctionName() {
      return this.functionName;
    }

    public writeResultsToMaster_args setFunctionName(java.lang.String functionName) {
      this.functionName = functionName;
      return this;
    }

    public void unsetFunctionName() {
      this.functionName = null;
    }

    /** Returns true if field functionName is set (has been assigned a value) and false otherwise */
    public boolean isSetFunctionName() {
      return this.functionName != null;
    }

    public void setFunctionNameIsSet(boolean value) {
      if (!value) {
        this.functionName = null;
      }
    }

    public java.lang.String getEventID() {
      return this.eventID;
    }

    public writeResultsToMaster_args setEventID(java.lang.String eventID) {
      this.eventID = eventID;
      return this;
    }

    public void unsetEventID() {
      this.eventID = null;
    }

    /** Returns true if field eventID is set (has been assigned a value) and false otherwise */
    public boolean isSetEventID() {
      return this.eventID != null;
    }

    public void setEventIDIsSet(boolean value) {
      if (!value) {
        this.eventID = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RESULT_SET:
        if (value == null) {
          unsetResultSet();
        } else {
          setResultSet((java.util.List<Argument>)value);
        }
        break;

      case FUNCTION_NAME:
        if (value == null) {
          unsetFunctionName();
        } else {
          setFunctionName((java.lang.String)value);
        }
        break;

      case EVENT_ID:
        if (value == null) {
          unsetEventID();
        } else {
          setEventID((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESULT_SET:
        return getResultSet();

      case FUNCTION_NAME:
        return getFunctionName();

      case EVENT_ID:
        return getEventID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESULT_SET:
        return isSetResultSet();
      case FUNCTION_NAME:
        return isSetFunctionName();
      case EVENT_ID:
        return isSetEventID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeResultsToMaster_args)
        return this.equals((writeResultsToMaster_args)that);
      return false;
    }

    public boolean equals(writeResultsToMaster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_resultSet = true && this.isSetResultSet();
      boolean that_present_resultSet = true && that.isSetResultSet();
      if (this_present_resultSet || that_present_resultSet) {
        if (!(this_present_resultSet && that_present_resultSet))
          return false;
        if (!this.resultSet.equals(that.resultSet))
          return false;
      }

      boolean this_present_functionName = true && this.isSetFunctionName();
      boolean that_present_functionName = true && that.isSetFunctionName();
      if (this_present_functionName || that_present_functionName) {
        if (!(this_present_functionName && that_present_functionName))
          return false;
        if (!this.functionName.equals(that.functionName))
          return false;
      }

      boolean this_present_eventID = true && this.isSetEventID();
      boolean that_present_eventID = true && that.isSetEventID();
      if (this_present_eventID || that_present_eventID) {
        if (!(this_present_eventID && that_present_eventID))
          return false;
        if (!this.eventID.equals(that.eventID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResultSet()) ? 131071 : 524287);
      if (isSetResultSet())
        hashCode = hashCode * 8191 + resultSet.hashCode();

      hashCode = hashCode * 8191 + ((isSetFunctionName()) ? 131071 : 524287);
      if (isSetFunctionName())
        hashCode = hashCode * 8191 + functionName.hashCode();

      hashCode = hashCode * 8191 + ((isSetEventID()) ? 131071 : 524287);
      if (isSetEventID())
        hashCode = hashCode * 8191 + eventID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeResultsToMaster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetResultSet()).compareTo(other.isSetResultSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResultSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultSet, other.resultSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFunctionName()).compareTo(other.isSetFunctionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFunctionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functionName, other.functionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEventID()).compareTo(other.isSetEventID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventID, other.eventID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeResultsToMaster_args(");
      boolean first = true;

      sb.append("resultSet:");
      if (this.resultSet == null) {
        sb.append("null");
      } else {
        sb.append(this.resultSet);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("functionName:");
      if (this.functionName == null) {
        sb.append("null");
      } else {
        sb.append(this.functionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eventID:");
      if (this.eventID == null) {
        sb.append("null");
      } else {
        sb.append(this.eventID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeResultsToMaster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeResultsToMaster_argsStandardScheme getScheme() {
        return new writeResultsToMaster_argsStandardScheme();
      }
    }

    private static class writeResultsToMaster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeResultsToMaster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeResultsToMaster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESULT_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.resultSet = new java.util.ArrayList<Argument>(_list16.size);
                  Argument _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new Argument();
                    _elem17.read(iprot);
                    struct.resultSet.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setResultSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FUNCTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.functionName = iprot.readString();
                struct.setFunctionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EVENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.eventID = iprot.readString();
                struct.setEventIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeResultsToMaster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.resultSet != null) {
          oprot.writeFieldBegin(RESULT_SET_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resultSet.size()));
            for (Argument _iter19 : struct.resultSet)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.functionName != null) {
          oprot.writeFieldBegin(FUNCTION_NAME_FIELD_DESC);
          oprot.writeString(struct.functionName);
          oprot.writeFieldEnd();
        }
        if (struct.eventID != null) {
          oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
          oprot.writeString(struct.eventID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeResultsToMaster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeResultsToMaster_argsTupleScheme getScheme() {
        return new writeResultsToMaster_argsTupleScheme();
      }
    }

    private static class writeResultsToMaster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeResultsToMaster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeResultsToMaster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResultSet()) {
          optionals.set(0);
        }
        if (struct.isSetFunctionName()) {
          optionals.set(1);
        }
        if (struct.isSetEventID()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetResultSet()) {
          {
            oprot.writeI32(struct.resultSet.size());
            for (Argument _iter20 : struct.resultSet)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetFunctionName()) {
          oprot.writeString(struct.functionName);
        }
        if (struct.isSetEventID()) {
          oprot.writeString(struct.eventID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeResultsToMaster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.resultSet = new java.util.ArrayList<Argument>(_list21.size);
            Argument _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new Argument();
              _elem22.read(iprot);
              struct.resultSet.add(_elem22);
            }
          }
          struct.setResultSetIsSet(true);
        }
        if (incoming.get(1)) {
          struct.functionName = iprot.readString();
          struct.setFunctionNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.eventID = iprot.readString();
          struct.setEventIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class writeResultsToMaster_result implements org.apache.thrift.TBase<writeResultsToMaster_result, writeResultsToMaster_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeResultsToMaster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeResultsToMaster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new writeResultsToMaster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new writeResultsToMaster_resultTupleSchemeFactory();

    public WriteResultResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WriteResultResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeResultsToMaster_result.class, metaDataMap);
    }

    public writeResultsToMaster_result() {
    }

    public writeResultsToMaster_result(
      WriteResultResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeResultsToMaster_result(writeResultsToMaster_result other) {
      if (other.isSetSuccess()) {
        this.success = new WriteResultResponse(other.success);
      }
    }

    public writeResultsToMaster_result deepCopy() {
      return new writeResultsToMaster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WriteResultResponse getSuccess() {
      return this.success;
    }

    public writeResultsToMaster_result setSuccess(WriteResultResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WriteResultResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof writeResultsToMaster_result)
        return this.equals((writeResultsToMaster_result)that);
      return false;
    }

    public boolean equals(writeResultsToMaster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(writeResultsToMaster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("writeResultsToMaster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeResultsToMaster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeResultsToMaster_resultStandardScheme getScheme() {
        return new writeResultsToMaster_resultStandardScheme();
      }
    }

    private static class writeResultsToMaster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<writeResultsToMaster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeResultsToMaster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WriteResultResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeResultsToMaster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeResultsToMaster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public writeResultsToMaster_resultTupleScheme getScheme() {
        return new writeResultsToMaster_resultTupleScheme();
      }
    }

    private static class writeResultsToMaster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<writeResultsToMaster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeResultsToMaster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeResultsToMaster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WriteResultResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
