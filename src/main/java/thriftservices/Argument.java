/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thriftservices;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2022-01-18")
public class Argument implements org.apache.thrift.TBase<Argument, Argument._Fields>, java.io.Serializable, Cloneable, Comparable<Argument> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Argument");

  private static final org.apache.thrift.protocol.TField ARG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("argName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ARG_PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("argPayload", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgumentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgumentTupleSchemeFactory();

  public java.lang.String argName; // required
  public java.nio.ByteBuffer argPayload; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ARG_NAME((short)1, "argName"),
    ARG_PAYLOAD((short)2, "argPayload");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ARG_NAME
          return ARG_NAME;
        case 2: // ARG_PAYLOAD
          return ARG_PAYLOAD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ARG_NAME, new org.apache.thrift.meta_data.FieldMetaData("argName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARG_PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("argPayload", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Argument.class, metaDataMap);
  }

  public Argument() {
  }

  public Argument(
    java.lang.String argName,
    java.nio.ByteBuffer argPayload)
  {
    this();
    this.argName = argName;
    this.argPayload = org.apache.thrift.TBaseHelper.copyBinary(argPayload);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Argument(Argument other) {
    if (other.isSetArgName()) {
      this.argName = other.argName;
    }
    if (other.isSetArgPayload()) {
      this.argPayload = org.apache.thrift.TBaseHelper.copyBinary(other.argPayload);
    }
  }

  public Argument deepCopy() {
    return new Argument(this);
  }

  @Override
  public void clear() {
    this.argName = null;
    this.argPayload = null;
  }

  public java.lang.String getArgName() {
    return this.argName;
  }

  public Argument setArgName(java.lang.String argName) {
    this.argName = argName;
    return this;
  }

  public void unsetArgName() {
    this.argName = null;
  }

  /** Returns true if field argName is set (has been assigned a value) and false otherwise */
  public boolean isSetArgName() {
    return this.argName != null;
  }

  public void setArgNameIsSet(boolean value) {
    if (!value) {
      this.argName = null;
    }
  }

  public byte[] getArgPayload() {
    setArgPayload(org.apache.thrift.TBaseHelper.rightSize(argPayload));
    return argPayload == null ? null : argPayload.array();
  }

  public java.nio.ByteBuffer bufferForArgPayload() {
    return org.apache.thrift.TBaseHelper.copyBinary(argPayload);
  }

  public Argument setArgPayload(byte[] argPayload) {
    this.argPayload = argPayload == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(argPayload.clone());
    return this;
  }

  public Argument setArgPayload(java.nio.ByteBuffer argPayload) {
    this.argPayload = org.apache.thrift.TBaseHelper.copyBinary(argPayload);
    return this;
  }

  public void unsetArgPayload() {
    this.argPayload = null;
  }

  /** Returns true if field argPayload is set (has been assigned a value) and false otherwise */
  public boolean isSetArgPayload() {
    return this.argPayload != null;
  }

  public void setArgPayloadIsSet(boolean value) {
    if (!value) {
      this.argPayload = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ARG_NAME:
      if (value == null) {
        unsetArgName();
      } else {
        setArgName((java.lang.String)value);
      }
      break;

    case ARG_PAYLOAD:
      if (value == null) {
        unsetArgPayload();
      } else {
        if (value instanceof byte[]) {
          setArgPayload((byte[])value);
        } else {
          setArgPayload((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ARG_NAME:
      return getArgName();

    case ARG_PAYLOAD:
      return getArgPayload();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ARG_NAME:
      return isSetArgName();
    case ARG_PAYLOAD:
      return isSetArgPayload();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Argument)
      return this.equals((Argument)that);
    return false;
  }

  public boolean equals(Argument that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_argName = true && this.isSetArgName();
    boolean that_present_argName = true && that.isSetArgName();
    if (this_present_argName || that_present_argName) {
      if (!(this_present_argName && that_present_argName))
        return false;
      if (!this.argName.equals(that.argName))
        return false;
    }

    boolean this_present_argPayload = true && this.isSetArgPayload();
    boolean that_present_argPayload = true && that.isSetArgPayload();
    if (this_present_argPayload || that_present_argPayload) {
      if (!(this_present_argPayload && that_present_argPayload))
        return false;
      if (!this.argPayload.equals(that.argPayload))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetArgName()) ? 131071 : 524287);
    if (isSetArgName())
      hashCode = hashCode * 8191 + argName.hashCode();

    hashCode = hashCode * 8191 + ((isSetArgPayload()) ? 131071 : 524287);
    if (isSetArgPayload())
      hashCode = hashCode * 8191 + argPayload.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Argument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetArgName()).compareTo(other.isSetArgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argName, other.argName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArgPayload()).compareTo(other.isSetArgPayload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgPayload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argPayload, other.argPayload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Argument(");
    boolean first = true;

    sb.append("argName:");
    if (this.argName == null) {
      sb.append("null");
    } else {
      sb.append(this.argName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("argPayload:");
    if (this.argPayload == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.argPayload, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (argName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'argName' was not present! Struct: " + toString());
    }
    if (argPayload == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'argPayload' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ArgumentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ArgumentStandardScheme getScheme() {
      return new ArgumentStandardScheme();
    }
  }

  private static class ArgumentStandardScheme extends org.apache.thrift.scheme.StandardScheme<Argument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Argument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ARG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.argName = iprot.readString();
              struct.setArgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARG_PAYLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.argPayload = iprot.readBinary();
              struct.setArgPayloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Argument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.argName != null) {
        oprot.writeFieldBegin(ARG_NAME_FIELD_DESC);
        oprot.writeString(struct.argName);
        oprot.writeFieldEnd();
      }
      if (struct.argPayload != null) {
        oprot.writeFieldBegin(ARG_PAYLOAD_FIELD_DESC);
        oprot.writeBinary(struct.argPayload);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ArgumentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ArgumentTupleScheme getScheme() {
      return new ArgumentTupleScheme();
    }
  }

  private static class ArgumentTupleScheme extends org.apache.thrift.scheme.TupleScheme<Argument> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Argument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.argName);
      oprot.writeBinary(struct.argPayload);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Argument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.argName = iprot.readString();
      struct.setArgNameIsSet(true);
      struct.argPayload = iprot.readBinary();
      struct.setArgPayloadIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

